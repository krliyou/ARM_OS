; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\obj\kservice.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\kservice.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\kernel -I.\app -I.\drivers\UART -I.\board -I.\board\Exception\Systick -I.\board\Interrupt -I.\board\System_Init -I.\board\Exception\ErrorHandler -I.\board\Register -I..\..\..\..\lib\include -I.\board\Delay -I..\..\..\..\components\shell -I..\..\..\..\lib\include -I..\..\..\..\lib\list -I..\..\..\..\lib\ringbuffer -I.\drivers\LED -I..\..\..\..\board\arm\cortex-m3 -I..\..\..\..\..\ARM_OS -I.\RTE\_liyou -ID:\36Keil_5_MDK\install\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\36Keil_5_MDK\install\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DSTM32F10X_HD --omf_browse=.\obj\kservice.crf ..\..\..\..\lib\kservice.c]
                          THUMB

                          AREA ||i.ly_memcmp||, CODE, READONLY, ALIGN=1

                  ly_memcmp PROC
;;;193     */
;;;194    signed long ly_memcmp(const void *cs, const void *ct,  unsigned long count)
000000  b5f0              PUSH     {r4-r7,lr}
;;;195    {
000002  4603              MOV      r3,r0
;;;196        const unsigned char *su1, *su2;
;;;197        int res = 0;
000004  2000              MOVS     r0,#0
;;;198    
;;;199        for (su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
000006  461c              MOV      r4,r3
000008  460d              MOV      r5,r1
00000a  e008              B        |L1.30|
                  |L1.12|
;;;200            if ((res = *su1 - *su2) != 0)
00000c  7826              LDRB     r6,[r4,#0]
00000e  782f              LDRB     r7,[r5,#0]
000010  1bf6              SUBS     r6,r6,r7
000012  1e30              SUBS     r0,r6,#0
000014  d000              BEQ      |L1.24|
;;;201                break;
000016  e004              B        |L1.34|
                  |L1.24|
000018  1c64              ADDS     r4,r4,#1              ;199
00001a  1c6d              ADDS     r5,r5,#1              ;199
00001c  1e52              SUBS     r2,r2,#1              ;199
                  |L1.30|
00001e  2a00              CMP      r2,#0                 ;199
000020  d8f4              BHI      |L1.12|
                  |L1.34|
000022  bf00              NOP      
;;;202    
;;;203        return res;
;;;204    }
000024  bdf0              POP      {r4-r7,pc}
;;;205    
                          ENDP


                          AREA ||i.ly_memcpy||, CODE, READONLY, ALIGN=1

                  ly_memcpy PROC
;;;10     
;;;11     void *ly_memcpy(void *dst, const void *src, unsigned long count)
000000  b5f0              PUSH     {r4-r7,lr}
;;;12     {
000002  460d              MOV      r5,r1
000004  4614              MOV      r4,r2
;;;13         char *tmp = (char *)dst, *s = (char *)src;
000006  4601              MOV      r1,r0
000008  462a              MOV      r2,r5
;;;14         unsigned long   len;
;;;15     
;;;16         if (tmp <= s || tmp > (s + count))
00000a  4291              CMP      r1,r2
00000c  d902              BLS      |L2.20|
00000e  1916              ADDS     r6,r2,r4
000010  428e              CMP      r6,r1
000012  d209              BCS      |L2.40|
                  |L2.20|
;;;17         {
;;;18             while (count--)
000014  e003              B        |L2.30|
                  |L2.22|
;;;19                 *tmp ++ = *s ++;
000016  f8126b01          LDRB     r6,[r2],#1
00001a  f8016b01          STRB     r6,[r1],#1
                  |L2.30|
00001e  1e26              SUBS     r6,r4,#0              ;18
000020  f1a40401          SUB      r4,r4,#1              ;18
000024  d1f7              BNE      |L2.22|
000026  e007              B        |L2.56|
                  |L2.40|
;;;20         }
;;;21         else
;;;22         {
;;;23             for (len = count; len > 0; len --)
000028  4623              MOV      r3,r4
00002a  e003              B        |L2.52|
                  |L2.44|
;;;24                 tmp[len - 1] = s[len - 1];
00002c  1e5e              SUBS     r6,r3,#1
00002e  5d97              LDRB     r7,[r2,r6]
000030  558f              STRB     r7,[r1,r6]
000032  1e5b              SUBS     r3,r3,#1              ;23
                  |L2.52|
000034  2b00              CMP      r3,#0                 ;23
000036  d1f9              BNE      |L2.44|
                  |L2.56|
;;;25         }
;;;26     
;;;27         return dst;
;;;28     }
000038  bdf0              POP      {r4-r7,pc}
;;;29     
                          ENDP


                          AREA ||i.ly_memmove||, CODE, READONLY, ALIGN=1

                  ly_memmove PROC
;;;90      */
;;;91     void *ly_memmove(void *dest, const void *src, unsigned long n)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
000002  460c              MOV      r4,r1
;;;93         char *tmp = (char *)dest, *s = (char *)src;
000004  4601              MOV      r1,r0
000006  4623              MOV      r3,r4
;;;94     
;;;95         if (s < tmp && tmp < s + n)
000008  428b              CMP      r3,r1
00000a  d210              BCS      |L3.46|
00000c  189d              ADDS     r5,r3,r2
00000e  428d              CMP      r5,r1
000010  d90d              BLS      |L3.46|
;;;96         {
;;;97             tmp += n;
000012  4411              ADD      r1,r1,r2
;;;98             s += n;
000014  4413              ADD      r3,r3,r2
;;;99     
;;;100            while (n--)
000016  e005              B        |L3.36|
                  |L3.24|
;;;101                *(--tmp) = *(--s);
000018  1e5d              SUBS     r5,r3,#1
00001a  462b              MOV      r3,r5
00001c  782e              LDRB     r6,[r5,#0]
00001e  1e4d              SUBS     r5,r1,#1
000020  4629              MOV      r1,r5
000022  702e              STRB     r6,[r5,#0]
                  |L3.36|
000024  1e15              SUBS     r5,r2,#0              ;100
000026  f1a20201          SUB      r2,r2,#1              ;100
00002a  d1f5              BNE      |L3.24|
00002c  e008              B        |L3.64|
                  |L3.46|
;;;102        }
;;;103        else
;;;104        {
;;;105            while (n--)
00002e  e003              B        |L3.56|
                  |L3.48|
;;;106                *tmp++ = *s++;
000030  f8135b01          LDRB     r5,[r3],#1
000034  f8015b01          STRB     r5,[r1],#1
                  |L3.56|
000038  1e15              SUBS     r5,r2,#0              ;105
00003a  f1a20201          SUB      r2,r2,#1              ;105
00003e  d1f7              BNE      |L3.48|
                  |L3.64|
;;;107        }
;;;108    
;;;109        return dest;
;;;110    }
000040  bd70              POP      {r4-r6,pc}
;;;111    
                          ENDP


                          AREA ||i.ly_memset||, CODE, READONLY, ALIGN=1

                  ly_memset PROC
;;;70      */
;;;71     void *ly_memset(void *s, int c, unsigned long count)
000000  b530              PUSH     {r4,r5,lr}
;;;72     {
;;;73         char *xs = (char *)s;
000002  4603              MOV      r3,r0
;;;74     
;;;75         while (count--)
000004  e001              B        |L4.10|
                  |L4.6|
;;;76             *xs++ = c;
000006  f8031b01          STRB     r1,[r3],#1
                  |L4.10|
00000a  1e14              SUBS     r4,r2,#0              ;75
00000c  f1a20201          SUB      r2,r2,#1              ;75
000010  d1f9              BNE      |L4.6|
;;;77     
;;;78         return s;
;;;79     }
000012  bd30              POP      {r4,r5,pc}
;;;80     
                          ENDP


                          AREA ||i.ly_strcmp||, CODE, READONLY, ALIGN=1

                  ly_strcmp PROC
;;;205    
;;;206    signed long ly_strcmp(const char *cs, const char *ct)
000000  4602              MOV      r2,r0
;;;207    {
;;;208        while (*cs && *cs == *ct)
000002  e001              B        |L5.8|
                  |L5.4|
;;;209            cs++, ct++;
000004  1c52              ADDS     r2,r2,#1
000006  1c49              ADDS     r1,r1,#1
                  |L5.8|
000008  7810              LDRB     r0,[r2,#0]            ;208
00000a  b118              CBZ      r0,|L5.20|
00000c  7810              LDRB     r0,[r2,#0]            ;208
00000e  780b              LDRB     r3,[r1,#0]            ;208
000010  4298              CMP      r0,r3                 ;208
000012  d0f7              BEQ      |L5.4|
                  |L5.20|
;;;210    
;;;211        return (*cs - *ct);
000014  7810              LDRB     r0,[r2,#0]
000016  780b              LDRB     r3,[r1,#0]
000018  1ac0              SUBS     r0,r0,r3
;;;212    }
00001a  4770              BX       lr
                          ENDP


                          AREA ||i.ly_strlen||, CODE, READONLY, ALIGN=1

                  ly_strlen PROC
;;;119     */
;;;120    unsigned long ly_strlen(const char *s)
000000  4601              MOV      r1,r0
;;;121    {
;;;122        const char *sc;
;;;123    
;;;124        for (sc = s; *sc != '\0'; ++sc)
000002  460a              MOV      r2,r1
000004  e000              B        |L6.8|
                  |L6.6|
000006  1c52              ADDS     r2,r2,#1
                  |L6.8|
000008  7810              LDRB     r0,[r2,#0]
00000a  2800              CMP      r0,#0
00000c  d1fb              BNE      |L6.6|
;;;125            ;
;;;126    
;;;127        return sc - s;
00000e  1a50              SUBS     r0,r2,r1
;;;128    }
000010  4770              BX       lr
;;;129    
                          ENDP


                          AREA ||i.ly_strncmp||, CODE, READONLY, ALIGN=1

                  ly_strncmp PROC
;;;139     */
;;;140    signed long ly_strncmp(const char *cs, const char *ct, unsigned long count)
000000  b530              PUSH     {r4,r5,lr}
;;;141    {
000002  4603              MOV      r3,r0
;;;142        register signed char __res = 0;
000004  2000              MOVS     r0,#0
;;;143    
;;;144        while (count)
000006  e00b              B        |L7.32|
                  |L7.8|
;;;145        {
;;;146            if ((__res = *cs - *ct++) != 0 || !*cs++)
000008  f8115b01          LDRB     r5,[r1],#1
00000c  781c              LDRB     r4,[r3,#0]
00000e  1b64              SUBS     r4,r4,r5
000010  b264              SXTB     r4,r4
000012  1e20              SUBS     r0,r4,#0
000014  d102              BNE      |L7.28|
000016  f8135b01          LDRB     r5,[r3],#1
00001a  b905              CBNZ     r5,|L7.30|
                  |L7.28|
;;;147                break;
00001c  e002              B        |L7.36|
                  |L7.30|
;;;148            count --;
00001e  1e52              SUBS     r2,r2,#1
                  |L7.32|
000020  2a00              CMP      r2,#0                 ;144
000022  d1f1              BNE      |L7.8|
                  |L7.36|
000024  bf00              NOP                            ;147
;;;149        }
;;;150    
;;;151        return __res;
;;;152    }
000026  bd30              POP      {r4,r5,pc}
;;;153    
                          ENDP


                          AREA ||i.ly_strncpy||, CODE, READONLY, ALIGN=1

                  ly_strncpy PROC
;;;39      */
;;;40     char *ly_strncpy(char *dst, const char *src, unsigned long n)
000000  b570              PUSH     {r4-r6,lr}
;;;41     {
000002  4603              MOV      r3,r0
;;;42         if (n != 0)
000004  b1a2              CBZ      r2,|L8.48|
;;;43         {
;;;44             char *d = dst;
000006  4618              MOV      r0,r3
;;;45             const char *s = src;
000008  460c              MOV      r4,r1
;;;46     
;;;47             do
00000a  bf00              NOP      
                  |L8.12|
;;;48             {
;;;49                 if ((*d++ = *s++) == 0)
00000c  f8146b01          LDRB     r6,[r4],#1
000010  f8006b01          STRB     r6,[r0],#1
000014  b93e              CBNZ     r6,|L8.38|
;;;50                 {
;;;51                     /* NUL pad the remaining n-1 bytes */
;;;52                     while (--n != 0)
000016  e002              B        |L8.30|
                  |L8.24|
;;;53                         *d++ = 0;
000018  2500              MOVS     r5,#0
00001a  f8005b01          STRB     r5,[r0],#1
                  |L8.30|
00001e  1e55              SUBS     r5,r2,#1              ;52
000020  1e2a              SUBS     r2,r5,#0              ;52
000022  d1f9              BNE      |L8.24|
;;;54                     break;
000024  e002              B        |L8.44|
                  |L8.38|
;;;55                 }
;;;56             } while (--n != 0);
000026  1e55              SUBS     r5,r2,#1
000028  1e2a              SUBS     r2,r5,#0
00002a  d1ef              BNE      |L8.12|
                  |L8.44|
00002c  bf00              NOP                            ;54
;;;57         }
00002e  bf00              NOP      
                  |L8.48|
;;;58     
;;;59         return (dst);
000030  4618              MOV      r0,r3
;;;60     }
000032  bd70              POP      {r4-r6,pc}
;;;61     
                          ENDP


                          AREA ||i.rt_memmove||, CODE, READONLY, ALIGN=1

                  rt_memmove PROC
;;;163     */
;;;164    void *rt_memmove(void *dest, const void *src, unsigned long n)
000000  b570              PUSH     {r4-r6,lr}
;;;165    {
000002  460c              MOV      r4,r1
;;;166        char *tmp = (char *)dest, *s = (char *)src;
000004  4601              MOV      r1,r0
000006  4623              MOV      r3,r4
;;;167    
;;;168        if (s < tmp && tmp < s + n)
000008  428b              CMP      r3,r1
00000a  d210              BCS      |L9.46|
00000c  189d              ADDS     r5,r3,r2
00000e  428d              CMP      r5,r1
000010  d90d              BLS      |L9.46|
;;;169        {
;;;170            tmp += n;
000012  4411              ADD      r1,r1,r2
;;;171            s += n;
000014  4413              ADD      r3,r3,r2
;;;172    
;;;173            while (n--)
000016  e005              B        |L9.36|
                  |L9.24|
;;;174                *(--tmp) = *(--s);
000018  1e5d              SUBS     r5,r3,#1
00001a  462b              MOV      r3,r5
00001c  782e              LDRB     r6,[r5,#0]
00001e  1e4d              SUBS     r5,r1,#1
000020  4629              MOV      r1,r5
000022  702e              STRB     r6,[r5,#0]
                  |L9.36|
000024  1e15              SUBS     r5,r2,#0              ;173
000026  f1a20201          SUB      r2,r2,#1              ;173
00002a  d1f5              BNE      |L9.24|
00002c  e008              B        |L9.64|
                  |L9.46|
;;;175        }
;;;176        else
;;;177        {
;;;178            while (n--)
00002e  e003              B        |L9.56|
                  |L9.48|
;;;179                *tmp++ = *s++;
000030  f8135b01          LDRB     r5,[r3],#1
000034  f8015b01          STRB     r5,[r1],#1
                  |L9.56|
000038  1e15              SUBS     r5,r2,#0              ;178
00003a  f1a20201          SUB      r2,r2,#1              ;178
00003e  d1f7              BNE      |L9.48|
                  |L9.64|
;;;180        }
;;;181    
;;;182        return dest;
;;;183    }
000040  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP

