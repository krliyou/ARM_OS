; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\obj\mailbox.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\mailbox.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\kernel -I.\app -I.\drivers\UART -I.\board -I.\board\Exception\Systick -I.\board\Interrupt -I.\board\System_Init -I.\board\Exception\ErrorHandler -I.\board\Register -I..\..\..\..\lib\include -I.\board\Delay -I..\..\..\..\components\shell -I..\..\..\..\lib\include -I..\..\..\..\lib\list -I..\..\..\..\lib\ringbuffer -I.\drivers\LED -I..\..\..\..\board\arm\cortex-m3 -I..\..\..\..\..\ARM_OS -I.\RTE\_liyou -ID:\36Keil_5_MDK\install\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\36Keil_5_MDK\install\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DSTM32F10X_HD --omf_browse=.\obj\mailbox.crf ..\..\..\..\kernel\mailbox.c]
                          THUMB

                          AREA ||i._ipc_list_resume_all||, CODE, READONLY, ALIGN=1

                  _ipc_list_resume_all PROC
;;;14     
;;;15     static inline signed long _ipc_list_resume_all
000000  b570              PUSH     {r4-r6,lr}
;;;16     					(struct list_head *list)
;;;17     {
000002  4605              MOV      r5,r0
;;;18     	struct ly_task *thread;
;;;19     	signed long level;
;;;20     
;;;21         while (!list_empty(list))
000004  e00f              B        |L1.38|
                  |L1.6|
;;;22         {
;;;23     		level = interrupt_disable();
000006  f7fffffe          BL       interrupt_disable
00000a  4606              MOV      r6,r0
;;;24             thread = list_entry(list->next, struct ly_task, tlist);
00000c  6829              LDR      r1,[r5,#0]
00000e  f1a10044          SUB      r0,r1,#0x44
000012  4604              MOV      r4,r0
;;;25             thread->error = -LY_ERROR;
000014  f04f30ff          MOV      r0,#0xffffffff
000018  6220              STR      r0,[r4,#0x20]
;;;26             ly_task_resume(thread);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       ly_task_resume
;;;27     		interrupt_enable(level);
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       interrupt_enable
                  |L1.38|
000026  4628              MOV      r0,r5                 ;21
000028  f7fffffe          BL       list_empty
00002c  2800              CMP      r0,#0                 ;21
00002e  d0ea              BEQ      |L1.6|
;;;28         }
;;;29     
;;;30         return 0;
000030  2000              MOVS     r0,#0
;;;31     }
000032  bd70              POP      {r4-r6,pc}
;;;32     
                          ENDP


                          AREA ||i._ipc_list_suspend||, CODE, READONLY, ALIGN=1

                  _ipc_list_suspend PROC
;;;55     
;;;56     static inline unsigned int _ipc_list_suspend(struct list_head *list,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;57                                            struct ly_task *thread,
;;;58                                            unsigned char flag,
;;;59                                            int suspend_flag)
;;;60     {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;61         if ((thread->stat & LY_THREAD_SUSPEND) != LY_THREAD_SUSPEND)
00000c  7d20              LDRB     r0,[r4,#0x14]
00000e  f0000004          AND      r0,r0,#4
000012  2804              CMP      r0,#4
000014  d009              BEQ      |L2.42|
;;;62         {
;;;63             signed long ret = ly_task_suspend_with_flag(thread, suspend_flag);
000016  4649              MOV      r1,r9
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       ly_task_suspend_with_flag
00001e  4606              MOV      r6,r0
;;;64             if (ret != LY_EOK)
000020  b116              CBZ      r6,|L2.40|
;;;65             {
;;;66                 return ret;
000022  4630              MOV      r0,r6
                  |L2.36|
;;;67             }
;;;68         }
;;;69     
;;;70         switch (flag)
;;;71         {
;;;72     		case LY_IPC_FLAG_FIFO:
;;;73     			list_add_before(&(thread->tlist), list);
;;;74     			break;
;;;75     
;;;76     		case LY_IPC_FLAG_PRIO:
;;;77     			{
;;;78     				struct list_head *n;
;;;79     				struct ly_task *sthread;
;;;80     
;;;81     				for (n = list->next; n != list; n = n->next)
;;;82     				{
;;;83     					sthread = list_entry(n, struct ly_task, tlist);
;;;84     
;;;85     					if (thread->current_priority < sthread->current_priority)
;;;86     					{
;;;87     						list_add_before(&(thread->tlist), &(sthread->tlist));
;;;88     						break;
;;;89     					}
;;;90     				}
;;;91     	
;;;92     				if (n == list)
;;;93     					list_add_before(&(thread->tlist), list);
;;;94     			}
;;;95     
;;;96     			break;
;;;97     
;;;98     		default:
;;;99     			break;
;;;100    		}
;;;101    
;;;102        return 0;
;;;103    }
000024  e8bd87f0          POP      {r4-r10,pc}
                  |L2.40|
000028  bf00              NOP                            ;68
                  |L2.42|
00002a  f1b80f00          CMP      r8,#0                 ;70
00002e  d003              BEQ      |L2.56|
000030  f1b80f01          CMP      r8,#1                 ;70
000034  d123              BNE      |L2.126|
000036  e005              B        |L2.68|
                  |L2.56|
000038  4629              MOV      r1,r5                 ;73
00003a  f1040044          ADD      r0,r4,#0x44           ;73
00003e  f7fffffe          BL       list_add_before
000042  e01d              B        |L2.128|
                  |L2.68|
000044  682e              LDR      r6,[r5,#0]            ;81
000046  e00f              B        |L2.104|
                  |L2.72|
000048  4631              MOV      r1,r6                 ;83
00004a  f1a10044          SUB      r0,r1,#0x44           ;83
00004e  4607              MOV      r7,r0                 ;83
000050  7d61              LDRB     r1,[r4,#0x15]         ;85
000052  7d78              LDRB     r0,[r7,#0x15]         ;85
000054  4281              CMP      r1,r0                 ;85
000056  da06              BGE      |L2.102|
000058  f1070144          ADD      r1,r7,#0x44           ;87
00005c  f1040044          ADD      r0,r4,#0x44           ;87
000060  f7fffffe          BL       list_add_before
000064  e002              B        |L2.108|
                  |L2.102|
000066  6836              LDR      r6,[r6,#0]            ;81
                  |L2.104|
000068  42ae              CMP      r6,r5                 ;81
00006a  d1ed              BNE      |L2.72|
                  |L2.108|
00006c  bf00              NOP                            ;88
00006e  42ae              CMP      r6,r5                 ;92
000070  d104              BNE      |L2.124|
000072  4629              MOV      r1,r5                 ;93
000074  f1040044          ADD      r0,r4,#0x44           ;93
000078  f7fffffe          BL       list_add_before
                  |L2.124|
00007c  e000              B        |L2.128|
                  |L2.126|
00007e  bf00              NOP                            ;99
                  |L2.128|
000080  bf00              NOP                            ;74
000082  2000              MOVS     r0,#0                 ;102
000084  e7ce              B        |L2.36|
;;;104    
                          ENDP


                          AREA ||i._ly_mb_recv||, CODE, READONLY, ALIGN=2

                  _ly_mb_recv PROC
;;;217    
;;;218    static signed long _ly_mb_recv(struct ly_mailbox *mb, 
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;219    						unsigned long *value, signed int timeout, int suspend_flag)
;;;220    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  469a              MOV      r10,r3
;;;221        struct ly_task *thread;
;;;222        signed long level;
;;;223        unsigned int tick_delta;
;;;224        signed long ret;
;;;225    
;;;226        tick_delta = 0;
00000c  f04f0900          MOV      r9,#0
;;;227    
;;;228        thread = get_current_task();
000010  483d              LDR      r0,|L3.264|
000012  6805              LDR      r5,[r0,#0]  ; ly_current_thread
;;;229    
;;;230        level = interrupt_disable();
000014  f7fffffe          BL       interrupt_disable
000018  4683              MOV      r11,r0
;;;231    
;;;232        if (mb->entry == 0 && timeout == 0)
00001a  88e0              LDRH     r0,[r4,#6]
00001c  b938              CBNZ     r0,|L3.46|
00001e  b936              CBNZ     r6,|L3.46|
;;;233        {
;;;234    		interrupt_enable(level);
000020  4658              MOV      r0,r11
000022  f7fffffe          BL       interrupt_enable
;;;235            return -LY_ETIMEOUT;
000026  f06f0001          MVN      r0,#1
                  |L3.42|
;;;236        }
;;;237    
;;;238        while (mb->entry == 0)
;;;239        {
;;;240            thread->error = -LY_EINTR;
;;;241    
;;;242            if (timeout == 0)
;;;243            {
;;;244    			interrupt_enable(level);
;;;245                thread->error = -LY_ETIMEOUT;
;;;246                return -LY_ETIMEOUT;
;;;247            }
;;;248    
;;;249            ret = _ipc_list_suspend(&(mb->suspend_recver_thread),
;;;250                                thread,
;;;251                                mb->flag,
;;;252                                suspend_flag);
;;;253            if (ret != LY_EOK)
;;;254            {
;;;255    			interrupt_enable(level);
;;;256                return ret;
;;;257            }
;;;258    
;;;259            if (timeout > 0)
;;;260            {
;;;261                tick_delta = get_current_tick();
;;;262    
;;;263    			thread->task_timer.init_tick = timeout;
;;;264    
;;;265                ly_timer_start(&(thread->task_timer));
;;;266            }
;;;267    
;;;268    		interrupt_enable(level);
;;;269    
;;;270            ly_schedule();
;;;271    
;;;272            if (thread->error != LY_EOK)
;;;273            {
;;;274                return thread->error;
;;;275            }
;;;276    
;;;277            level = interrupt_disable();
;;;278    
;;;279            if (timeout > 0)
;;;280            {
;;;281                tick_delta = get_current_tick() - tick_delta;
;;;282                timeout -= tick_delta;
;;;283                if (timeout < 0)
;;;284                    timeout = 0;
;;;285            }
;;;286        }
;;;287    
;;;288        *value = mb->msg_pool[mb->out_offset];
;;;289    
;;;290        ++ mb->out_offset;
;;;291        if (mb->out_offset >= mb->size)
;;;292            mb->out_offset = 0;
;;;293    
;;;294        if(mb->entry > 0)
;;;295        {
;;;296            mb->entry --;
;;;297        }
;;;298    
;;;299        if (!list_empty(&(mb->suspend_sender_thread)))
;;;300        {
;;;301    		thread = list_entry(mb->suspend_sender_thread.next, struct ly_task, tlist);
;;;302    		thread->error = LY_EOK;
;;;303    		ly_task_resume(thread);
;;;304    		interrupt_enable(level);
;;;305            ly_schedule();
;;;306            return LY_EOK;
;;;307        }
;;;308    
;;;309    	interrupt_enable(level);
;;;310    
;;;311        return LY_EOK;
;;;312    }
00002a  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.46|
00002e  e039              B        |L3.164|
                  |L3.48|
000030  f06f0008          MVN      r0,#8                 ;240
000034  6228              STR      r0,[r5,#0x20]         ;240
000036  b936              CBNZ     r6,|L3.70|
000038  4658              MOV      r0,r11                ;244
00003a  f7fffffe          BL       interrupt_enable
00003e  f06f0001          MVN      r0,#1                 ;245
000042  6228              STR      r0,[r5,#0x20]         ;245
000044  e7f1              B        |L3.42|
                  |L3.70|
000046  7b22              LDRB     r2,[r4,#0xc]          ;249
000048  4653              MOV      r3,r10                ;249
00004a  4629              MOV      r1,r5                 ;249
00004c  f1040010          ADD      r0,r4,#0x10           ;249
000050  f7fffffe          BL       _ipc_list_suspend
000054  4607              MOV      r7,r0                 ;249
000056  b127              CBZ      r7,|L3.98|
000058  4658              MOV      r0,r11                ;255
00005a  f7fffffe          BL       interrupt_enable
00005e  4638              MOV      r0,r7                 ;256
000060  e7e3              B        |L3.42|
                  |L3.98|
000062  2e00              CMP      r6,#0                 ;259
000064  dd07              BLE      |L3.118|
000066  f7fffffe          BL       get_current_tick
00006a  4681              MOV      r9,r0                 ;261
00006c  63ae              STR      r6,[r5,#0x38]         ;263
00006e  f1050028          ADD      r0,r5,#0x28           ;265
000072  f7fffffe          BL       ly_timer_start
                  |L3.118|
000076  4658              MOV      r0,r11                ;268
000078  f7fffffe          BL       interrupt_enable
00007c  f7fffffe          BL       ly_schedule
000080  6a28              LDR      r0,[r5,#0x20]         ;272
000082  b108              CBZ      r0,|L3.136|
000084  6a28              LDR      r0,[r5,#0x20]         ;274
000086  e7d0              B        |L3.42|
                  |L3.136|
000088  f7fffffe          BL       interrupt_disable
00008c  4683              MOV      r11,r0                ;277
00008e  2e00              CMP      r6,#0                 ;279
000090  dd08              BLE      |L3.164|
000092  f7fffffe          BL       get_current_tick
000096  eba00909          SUB      r9,r0,r9              ;281
00009a  eba60609          SUB      r6,r6,r9              ;282
00009e  2e00              CMP      r6,#0                 ;283
0000a0  da00              BGE      |L3.164|
0000a2  2600              MOVS     r6,#0                 ;284
                  |L3.164|
0000a4  88e0              LDRH     r0,[r4,#6]            ;238
0000a6  2800              CMP      r0,#0                 ;238
0000a8  d0c2              BEQ      |L3.48|
0000aa  8961              LDRH     r1,[r4,#0xa]          ;288
0000ac  6820              LDR      r0,[r4,#0]            ;288
0000ae  f8500021          LDR      r0,[r0,r1,LSL #2]     ;288
0000b2  f8c80000          STR      r0,[r8,#0]            ;288
0000b6  8960              LDRH     r0,[r4,#0xa]          ;290
0000b8  1c40              ADDS     r0,r0,#1              ;290
0000ba  8160              STRH     r0,[r4,#0xa]          ;290
0000bc  8960              LDRH     r0,[r4,#0xa]          ;291
0000be  88a1              LDRH     r1,[r4,#4]            ;291
0000c0  4288              CMP      r0,r1                 ;291
0000c2  db01              BLT      |L3.200|
0000c4  2000              MOVS     r0,#0                 ;292
0000c6  8160              STRH     r0,[r4,#0xa]          ;292
                  |L3.200|
0000c8  88e0              LDRH     r0,[r4,#6]            ;294
0000ca  2800              CMP      r0,#0                 ;294
0000cc  dd02              BLE      |L3.212|
0000ce  88e0              LDRH     r0,[r4,#6]            ;296
0000d0  1e40              SUBS     r0,r0,#1              ;296
0000d2  80e0              STRH     r0,[r4,#6]            ;296
                  |L3.212|
0000d4  f1040018          ADD      r0,r4,#0x18           ;299
0000d8  f7fffffe          BL       list_empty
0000dc  b978              CBNZ     r0,|L3.254|
0000de  69a1              LDR      r1,[r4,#0x18]         ;301
0000e0  f1a10044          SUB      r0,r1,#0x44           ;301
0000e4  4605              MOV      r5,r0                 ;301
0000e6  2000              MOVS     r0,#0                 ;302
0000e8  6228              STR      r0,[r5,#0x20]         ;302
0000ea  4628              MOV      r0,r5                 ;303
0000ec  f7fffffe          BL       ly_task_resume
0000f0  4658              MOV      r0,r11                ;304
0000f2  f7fffffe          BL       interrupt_enable
0000f6  f7fffffe          BL       ly_schedule
0000fa  2000              MOVS     r0,#0                 ;306
0000fc  e795              B        |L3.42|
                  |L3.254|
0000fe  4658              MOV      r0,r11                ;309
000100  f7fffffe          BL       interrupt_enable
000104  2000              MOVS     r0,#0                 ;311
000106  e790              B        |L3.42|
;;;313    
                          ENDP

                  |L3.264|
                          DCD      ly_current_thread

                          AREA ||i._ly_mb_send_wait||, CODE, READONLY, ALIGN=2

                  _ly_mb_send_wait PROC
;;;104    
;;;105    static signed long _ly_mb_send_wait(struct ly_mailbox *mb,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;106                             unsigned long	value,
;;;107                             signed int timeout,
;;;108                             int suspend_flag)
;;;109    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
;;;110        struct ly_task *thread;
;;;111        signed int level;
;;;112        unsigned int tick_delta;
;;;113        signed long ret;
;;;114    
;;;115        tick_delta = 0;
00000c  f04f0900          MOV      r9,#0
;;;116        thread = get_current_task();
000010  4842              LDR      r0,|L4.284|
000012  6806              LDR      r6,[r0,#0]  ; ly_current_thread
;;;117    
;;;118        level = interrupt_disable();
000014  f7fffffe          BL       interrupt_disable
000018  4683              MOV      r11,r0
;;;119    
;;;120        if (mb->entry == mb->size && timeout == 0)
00001a  88e0              LDRH     r0,[r4,#6]
00001c  88a1              LDRH     r1,[r4,#4]
00001e  4288              CMP      r0,r1
000020  d107              BNE      |L4.50|
000022  b935              CBNZ     r5,|L4.50|
;;;121        {
;;;122            interrupt_enable(level);
000024  4658              MOV      r0,r11
000026  f7fffffe          BL       interrupt_enable
;;;123            return -LY_EFULL;
00002a  f06f0002          MVN      r0,#2
                  |L4.46|
;;;124        }
;;;125    
;;;126        while (mb->entry == mb->size)
;;;127        {
;;;128    		thread->error = -LY_EINTR;
;;;129    
;;;130            if (timeout == 0)
;;;131            {
;;;132    			interrupt_enable(level);
;;;133                return -LY_EFULL;
;;;134            }
;;;135    
;;;136            ret = _ipc_list_suspend(&(mb->suspend_sender_thread),
;;;137                                thread,
;;;138                                mb->flag,
;;;139                                suspend_flag);
;;;140            if (ret != LY_EOK)
;;;141            {
;;;142    			interrupt_enable(level);
;;;143                return ret;
;;;144            }
;;;145    
;;;146            if (timeout > 0)
;;;147            {
;;;148                tick_delta = get_current_tick();
;;;149    			thread->task_timer.init_tick = timeout;
;;;150                ly_timer_start(&(thread->task_timer));
;;;151            }
;;;152    
;;;153    		interrupt_enable(level);
;;;154    
;;;155            ly_schedule();
;;;156    
;;;157            if (thread->error != LY_EOK)
;;;158            {
;;;159                return thread->error;
;;;160            }
;;;161    
;;;162            level = interrupt_disable();
;;;163    
;;;164            if (timeout > 0)
;;;165            {
;;;166                tick_delta = get_current_tick() - tick_delta;
;;;167                timeout -= tick_delta;
;;;168                if (timeout < 0)
;;;169                    timeout = 0;
;;;170            }
;;;171    	}
;;;172    
;;;173        mb->msg_pool[mb->in_offset] = value;
;;;174        ++ mb->in_offset;
;;;175        if (mb->in_offset >= mb->size)
;;;176            mb->in_offset = 0;
;;;177    
;;;178    	if(mb->entry < LY_MB_ENTRY_MAX)
;;;179        {
;;;180            mb->entry ++;
;;;181        }
;;;182        else
;;;183        {
;;;184            interrupt_enable(level); 
;;;185            return -LY_EFULL; 
;;;186        }
;;;187    
;;;188        if (!list_empty(&mb->suspend_recver_thread))
;;;189        {
;;;190    		thread = list_entry(mb->suspend_recver_thread.next, struct ly_task, tlist);
;;;191    
;;;192    		thread->error = LY_EOK;
;;;193    
;;;194    		ly_task_resume(thread);
;;;195    
;;;196    		interrupt_enable(level);
;;;197    
;;;198            ly_schedule();
;;;199    
;;;200            return LY_EOK;
;;;201        }
;;;202    
;;;203    	interrupt_enable(level);
;;;204    
;;;205        return LY_EOK;
;;;206    }
00002e  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.50|
000032  e038              B        |L4.166|
                  |L4.52|
000034  f06f0008          MVN      r0,#8                 ;128
000038  6230              STR      r0,[r6,#0x20]         ;128
00003a  b92d              CBNZ     r5,|L4.72|
00003c  4658              MOV      r0,r11                ;132
00003e  f7fffffe          BL       interrupt_enable
000042  f06f0002          MVN      r0,#2                 ;133
000046  e7f2              B        |L4.46|
                  |L4.72|
000048  7b22              LDRB     r2,[r4,#0xc]          ;136
00004a  4653              MOV      r3,r10                ;136
00004c  4631              MOV      r1,r6                 ;136
00004e  f1040018          ADD      r0,r4,#0x18           ;136
000052  f7fffffe          BL       _ipc_list_suspend
000056  4607              MOV      r7,r0                 ;136
000058  b127              CBZ      r7,|L4.100|
00005a  4658              MOV      r0,r11                ;142
00005c  f7fffffe          BL       interrupt_enable
000060  4638              MOV      r0,r7                 ;143
000062  e7e4              B        |L4.46|
                  |L4.100|
000064  2d00              CMP      r5,#0                 ;146
000066  dd07              BLE      |L4.120|
000068  f7fffffe          BL       get_current_tick
00006c  4681              MOV      r9,r0                 ;148
00006e  63b5              STR      r5,[r6,#0x38]         ;149
000070  f1060028          ADD      r0,r6,#0x28           ;150
000074  f7fffffe          BL       ly_timer_start
                  |L4.120|
000078  4658              MOV      r0,r11                ;153
00007a  f7fffffe          BL       interrupt_enable
00007e  f7fffffe          BL       ly_schedule
000082  6a30              LDR      r0,[r6,#0x20]         ;157
000084  b108              CBZ      r0,|L4.138|
000086  6a30              LDR      r0,[r6,#0x20]         ;159
000088  e7d1              B        |L4.46|
                  |L4.138|
00008a  f7fffffe          BL       interrupt_disable
00008e  4683              MOV      r11,r0                ;162
000090  2d00              CMP      r5,#0                 ;164
000092  dd08              BLE      |L4.166|
000094  f7fffffe          BL       get_current_tick
000098  eba00909          SUB      r9,r0,r9              ;166
00009c  eba50509          SUB      r5,r5,r9              ;167
0000a0  2d00              CMP      r5,#0                 ;168
0000a2  da00              BGE      |L4.166|
0000a4  2500              MOVS     r5,#0                 ;169
                  |L4.166|
0000a6  88e0              LDRH     r0,[r4,#6]            ;126
0000a8  88a1              LDRH     r1,[r4,#4]            ;126
0000aa  4288              CMP      r0,r1                 ;126
0000ac  d0c2              BEQ      |L4.52|
0000ae  8921              LDRH     r1,[r4,#8]            ;173
0000b0  6820              LDR      r0,[r4,#0]            ;173
0000b2  f8408021          STR      r8,[r0,r1,LSL #2]     ;173
0000b6  8920              LDRH     r0,[r4,#8]            ;174
0000b8  1c40              ADDS     r0,r0,#1              ;174
0000ba  8120              STRH     r0,[r4,#8]            ;174
0000bc  8920              LDRH     r0,[r4,#8]            ;175
0000be  88a1              LDRH     r1,[r4,#4]            ;175
0000c0  4288              CMP      r0,r1                 ;175
0000c2  db01              BLT      |L4.200|
0000c4  2000              MOVS     r0,#0                 ;176
0000c6  8120              STRH     r0,[r4,#8]            ;176
                  |L4.200|
0000c8  88e0              LDRH     r0,[r4,#6]            ;178
0000ca  f64f71ff          MOV      r1,#0xffff            ;178
0000ce  4288              CMP      r0,r1                 ;178
0000d0  d203              BCS      |L4.218|
0000d2  88e0              LDRH     r0,[r4,#6]            ;180
0000d4  1c40              ADDS     r0,r0,#1              ;180
0000d6  80e0              STRH     r0,[r4,#6]            ;180
0000d8  e005              B        |L4.230|
                  |L4.218|
0000da  4658              MOV      r0,r11                ;184
0000dc  f7fffffe          BL       interrupt_enable
0000e0  f06f0002          MVN      r0,#2                 ;185
0000e4  e7a3              B        |L4.46|
                  |L4.230|
0000e6  f1040010          ADD      r0,r4,#0x10           ;188
0000ea  f7fffffe          BL       list_empty
0000ee  b978              CBNZ     r0,|L4.272|
0000f0  6921              LDR      r1,[r4,#0x10]         ;190
0000f2  f1a10044          SUB      r0,r1,#0x44           ;190
0000f6  4606              MOV      r6,r0                 ;190
0000f8  2000              MOVS     r0,#0                 ;192
0000fa  6230              STR      r0,[r6,#0x20]         ;192
0000fc  4630              MOV      r0,r6                 ;194
0000fe  f7fffffe          BL       ly_task_resume
000102  4658              MOV      r0,r11                ;196
000104  f7fffffe          BL       interrupt_enable
000108  f7fffffe          BL       ly_schedule
00010c  2000              MOVS     r0,#0                 ;200
00010e  e78e              B        |L4.46|
                  |L4.272|
000110  4658              MOV      r0,r11                ;203
000112  f7fffffe          BL       interrupt_enable
000116  2000              MOVS     r0,#0                 ;205
000118  e789              B        |L4.46|
;;;207    
                          ENDP

00011a  0000              DCW      0x0000
                  |L4.284|
                          DCD      ly_current_thread

                          AREA ||i.list_add_before||, CODE, READONLY, ALIGN=1

                  list_add_before PROC
;;;35     
;;;36     static inline void list_add_before(struct list_head *new, 
000000  684a              LDR      r2,[r1,#4]
000002  6048              STR      r0,[r1,#4]
000004  6001              STR      r1,[r0,#0]
000006  6042              STR      r2,[r0,#4]
000008  6010              STR      r0,[r2,#0]
00000a  bf00              NOP      
;;;37     				struct list_head *head)
;;;38     {
;;;39     	__list_add(new, head->prev, head);
;;;40     }
00000c  4770              BX       lr
;;;41     
                          ENDP


                          AREA ||i.list_empty||, CODE, READONLY, ALIGN=1

                  list_empty PROC
;;;41     
;;;42     static inline int list_empty(const struct list_head *head)
000000  4601              MOV      r1,r0
;;;43     {
;;;44     	return head->next == head;
000002  6808              LDR      r0,[r1,#0]
000004  4288              CMP      r0,r1
000006  d101              BNE      |L6.12|
000008  2001              MOVS     r0,#1
                  |L6.10|
;;;45     }
00000a  4770              BX       lr
                  |L6.12|
00000c  2000              MOVS     r0,#0                 ;44
00000e  e7fc              B        |L6.10|
;;;46     
                          ENDP


                          AREA ||i.list_init||, CODE, READONLY, ALIGN=1

                  list_init PROC
;;;14     
;;;15     static inline void list_init(struct list_head *list)
000000  6000              STR      r0,[r0,#0]
;;;16     {
;;;17     	list->next = list;
;;;18     	list->prev = list;
000002  6040              STR      r0,[r0,#4]
;;;19     }
000004  4770              BX       lr
;;;20     
                          ENDP


                          AREA ||i.ly_mb_detach||, CODE, READONLY, ALIGN=1

                  ly_mb_detach PROC
;;;48     
;;;49     signed long ly_mb_detach(struct ly_mailbox *mb)
000000  b510              PUSH     {r4,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51     	_ipc_list_resume_all(&(mb->suspend_recver_thread));
000004  f1040010          ADD      r0,r4,#0x10
000008  f7fffffe          BL       _ipc_list_resume_all
;;;52         _ipc_list_resume_all(&(mb->suspend_sender_thread));
00000c  f1040018          ADD      r0,r4,#0x18
000010  f7fffffe          BL       _ipc_list_resume_all
;;;53         return LY_EOK;
000014  2000              MOVS     r0,#0
;;;54     }
000016  bd10              POP      {r4,pc}
;;;55     
                          ENDP


                          AREA ||i.ly_mb_init||, CODE, READONLY, ALIGN=1

                  ly_mb_init PROC
;;;32     
;;;33     signed long ly_mb_init(struct ly_mailbox *mb, void *msgpool, 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;34     				unsigned long size, unsigned char flag)
;;;35     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461e              MOV      r6,r3
;;;36         mb->msg_pool   = (unsigned long*)msgpool;
00000c  6025              STR      r5,[r4,#0]
;;;37         mb->size       = (unsigned short)size;
00000e  80a7              STRH     r7,[r4,#4]
;;;38         mb->entry      = 0;
000010  2000              MOVS     r0,#0
000012  80e0              STRH     r0,[r4,#6]
;;;39         mb->in_offset  = 0;
000014  8120              STRH     r0,[r4,#8]
;;;40         mb->out_offset = 0;
000016  8160              STRH     r0,[r4,#0xa]
;;;41     	mb->flag = flag;
000018  7326              STRB     r6,[r4,#0xc]
;;;42     
;;;43         list_init(&(mb->suspend_sender_thread));
00001a  f1040018          ADD      r0,r4,#0x18
00001e  f7fffffe          BL       list_init
;;;44     	list_init(&(mb->suspend_recver_thread));
000022  f1040010          ADD      r0,r4,#0x10
000026  f7fffffe          BL       list_init
;;;45         
;;;46     	return 0;
00002a  2000              MOVS     r0,#0
;;;47     }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;48     
                          ENDP


                          AREA ||i.ly_mb_recv||, CODE, READONLY, ALIGN=1

                  ly_mb_recv PROC
;;;313    
;;;314    signed long ly_mb_recv(struct ly_mailbox *mb, unsigned long *value, unsigned long timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;315    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;316        return _ly_mb_recv(mb, value, timeout, LY_UNINTERRUPTIBLE);
000008  2302              MOVS     r3,#2
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ly_mb_recv
;;;317    }
000014  bd70              POP      {r4-r6,pc}
;;;318    
                          ENDP


                          AREA ||i.ly_mb_send||, CODE, READONLY, ALIGN=1

                  ly_mb_send PROC
;;;212    
;;;213    signed long ly_mb_send(struct ly_mailbox *mb, unsigned long value)
000000  b570              PUSH     {r4-r6,lr}
;;;214    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;215        return ly_mb_send_wait(mb, value, 0);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       ly_mb_send_wait
;;;216    }
000010  bd70              POP      {r4-r6,pc}
;;;217    
                          ENDP


                          AREA ||i.ly_mb_send_wait||, CODE, READONLY, ALIGN=1

                  ly_mb_send_wait PROC
;;;207    
;;;208    signed long ly_mb_send_wait(struct ly_mailbox *mb, unsigned long value, unsigned long timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;209    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;210        return _ly_mb_send_wait(mb, value, timeout, LY_UNINTERRUPTIBLE);
000008  2302              MOVS     r3,#2
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ly_mb_send_wait
;;;211    }
000014  bd70              POP      {r4-r6,pc}
;;;212    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  ly_mailbox_t
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\kernel\\mailbox.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_mailbox_c_0a79f86a____REV16|
#line 464 ".\\board\\Interrupt\\Nvic_armcc.h"
|__asm___9_mailbox_c_0a79f86a____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_mailbox_c_0a79f86a____REVSH|
#line 479
|__asm___9_mailbox_c_0a79f86a____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_mailbox_c_0a79f86a____RRX|
#line 666
|__asm___9_mailbox_c_0a79f86a____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
