; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\obj\cpuport_1.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\cpuport_1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\kernel -I.\app -I.\drivers\UART -I.\board -I.\board\Exception\Systick -I.\board\Interrupt -I.\board\System_Init -I.\board\Exception\ErrorHandler -I.\board\Register -I..\..\..\..\lib\include -I..\..\..\..\..\LIYOU_ARM -I..\..\..\..\components\arm_backtrace -I.\board\Delay -I..\..\..\..\components\shell -I..\..\..\..\lib\include -I..\..\..\..\lib\list -I..\..\..\..\lib\ringbuffer -I.\drivers\LED -I..\..\..\..\board\arm\cortex-m3 -I.\RTE\_liyou -ID:\36Keil_5_MDK\install\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\36Keil_5_MDK\install\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DSTM32F10X_HD --omf_browse=.\obj\cpuport_1.crf ..\..\..\..\board\arm\cortex-m3\cpuport.c]
                          THUMB

                          AREA ||i.ly_stack_init||, CODE, READONLY, ALIGN=2

                  ly_stack_init PROC
;;;15     
;;;16     unsigned char *ly_stack_init(void *tentry, 
000000  b5f0              PUSH     {r4-r7,lr}
;;;17     				void *parameter, 
;;;18     				unsigned char *stack_addr,
;;;19     				void *texit)
;;;20     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;21         struct stack_frame *stack_frame;
;;;22         unsigned char      *stk;
;;;23         unsigned long       i;
;;;24     
;;;25         stk  = stack_addr + sizeof(unsigned int);
000008  1d30              ADDS     r0,r6,#4
;;;26         stk  = (unsigned char *)ALIGN_DOWN((unsigned int)stk, 8);
00000a  f0200007          BIC      r0,r0,#7
;;;27         stk -= sizeof(struct stack_frame);
00000e  3840              SUBS     r0,r0,#0x40
;;;28     
;;;29         stack_frame = (struct stack_frame *)stk;
000010  4601              MOV      r1,r0
;;;30     
;;;31         for (i = 0; i < sizeof(struct stack_frame) / sizeof(unsigned int); i ++)
000012  2200              MOVS     r2,#0
000014  e003              B        |L1.30|
                  |L1.22|
;;;32         {
;;;33             ((unsigned int *)stack_frame)[i] = 0xdeadbeef;
000016  4f0c              LDR      r7,|L1.72|
000018  f8417022          STR      r7,[r1,r2,LSL #2]
00001c  1c52              ADDS     r2,r2,#1              ;31
                  |L1.30|
00001e  2a10              CMP      r2,#0x10              ;31
000020  d3f9              BCC      |L1.22|
;;;34         }
;;;35     
;;;36         stack_frame->exception_stack_frame.r0  = (unsigned long)parameter;
000022  620d              STR      r5,[r1,#0x20]
;;;37         stack_frame->exception_stack_frame.r1  = 0;                        
000024  f04f0c00          MOV      r12,#0
000028  f8c1c024          STR      r12,[r1,#0x24]
;;;38         stack_frame->exception_stack_frame.r2  = 0;                      
00002c  f8c1c028          STR      r12,[r1,#0x28]
;;;39         stack_frame->exception_stack_frame.r3  = 0;                        
000030  f8c1c02c          STR      r12,[r1,#0x2c]
;;;40         stack_frame->exception_stack_frame.r12 = 0;                     
000034  f8c1c030          STR      r12,[r1,#0x30]
;;;41         stack_frame->exception_stack_frame.lr  = (unsigned long)texit;     
000038  634b              STR      r3,[r1,#0x34]
;;;42         stack_frame->exception_stack_frame.pc  = (unsigned long)tentry;
00003a  638c              STR      r4,[r1,#0x38]
;;;43         stack_frame->exception_stack_frame.psr = 0x01000000L;
00003c  f04f7c80          MOV      r12,#0x1000000
000040  f8c1c03c          STR      r12,[r1,#0x3c]
;;;44     
;;;45         return stk;
;;;46     }
000044  bdf0              POP      {r4-r7,pc}
;;;47     
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      0xdeadbeef

                          AREA ||.data||, DATA, ALIGN=2

                  ly_interrupt_from_thread
                          DCD      0x00000000
                  ly_interrupt_to_thread
                          DCD      0x00000000
                  ly_thread_switch_interrupt_flag
                          DCD      0x00000000
