; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\obj\kfifo.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\kfifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\kernel -I.\app -I.\drivers\UART -I.\board -I.\board\Exception\Systick -I.\board\Interrupt -I.\board\System_Init -I.\board\Exception\ErrorHandler -I.\board\Register -I..\..\..\..\lib\include -I.\board\Delay -I..\..\..\..\components\shell -I..\..\..\..\lib\include -I..\..\..\..\lib\list -I..\..\..\..\lib\ringbuffer -I.\drivers\LED -I..\..\..\..\board\arm\cortex-m3 -I..\..\..\..\..\ARM_OS -I.\RTE\_liyou -ID:\36Keil_5_MDK\install\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\36Keil_5_MDK\install\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DSTM32F10X_HD --omf_browse=.\obj\kfifo.crf ..\..\..\..\lib\ringbuffer\kfifo.c]
                          THUMB

                          AREA ||i.__kfifo_init||, CODE, READONLY, ALIGN=1

                  __kfifo_init PROC
;;;9      
;;;10     unsigned int __kfifo_init(struct kfifo *fifo,
000000  b510              PUSH     {r4,lr}
;;;11     	void *buffer, unsigned int size, unsigned int esize)
;;;12     {
000002  4604              MOV      r4,r0
;;;13     	size /= esize; 
000004  fbb2f2f3          UDIV     r2,r2,r3
;;;14     
;;;15     	fifo->in = 0;
000008  2000              MOVS     r0,#0
00000a  6020              STR      r0,[r4,#0]
;;;16     	fifo->out = 0;
00000c  6060              STR      r0,[r4,#4]
;;;17     	fifo->data = buffer;
00000e  60e1              STR      r1,[r4,#0xc]
;;;18     	fifo->mask = size - 1;
000010  1e50              SUBS     r0,r2,#1
000012  60a0              STR      r0,[r4,#8]
;;;19     
;;;20     	return 0;
000014  2000              MOVS     r0,#0
;;;21     }
000016  bd10              POP      {r4,pc}
;;;22     
                          ENDP


                          AREA ||i.kfifo_copy_in||, CODE, READONLY, ALIGN=1

                  kfifo_copy_in PROC
;;;22     
;;;23     static void kfifo_copy_in(struct kfifo *fifo, 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;24     	const unsigned char *src, unsigned int len, unsigned int off)
;;;25     {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;26     	unsigned int size = fifo->mask + 1;
00000c  68a0              LDR      r0,[r4,#8]
00000e  f1000901          ADD      r9,r0,#1
;;;27     	unsigned int l;
;;;28     
;;;29     	off &= fifo->mask;
000012  68a0              LDR      r0,[r4,#8]
000014  4005              ANDS     r5,r5,r0
;;;30     
;;;31     	l = min(len, size - off);		
000016  eba90005          SUB      r0,r9,r5
00001a  42b0              CMP      r0,r6
00001c  d901              BLS      |L2.34|
00001e  4630              MOV      r0,r6
000020  e001              B        |L2.38|
                  |L2.34|
000022  eba90005          SUB      r0,r9,r5
                  |L2.38|
000026  4607              MOV      r7,r0
;;;32     		
;;;33     	ly_memcpy(fifo->data + off, src, l);
000028  68e1              LDR      r1,[r4,#0xc]
00002a  1948              ADDS     r0,r1,r5
00002c  463a              MOV      r2,r7
00002e  4641              MOV      r1,r8
000030  f7fffffe          BL       ly_memcpy
;;;34     
;;;35     	ly_memcpy(fifo->data, src + l, len - l);
000034  1bf2              SUBS     r2,r6,r7
000036  eb080107          ADD      r1,r8,r7
00003a  68e0              LDR      r0,[r4,#0xc]
00003c  f7fffffe          BL       ly_memcpy
;;;36     }
000040  e8bd87f0          POP      {r4-r10,pc}
;;;37     
                          ENDP


                          AREA ||i.kfifo_copy_out||, CODE, READONLY, ALIGN=1

                  kfifo_copy_out PROC
;;;52     
;;;53     static void kfifo_copy_out(struct kfifo *fifo, void *dst,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;54     		unsigned int len, unsigned int off)
;;;55     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;56     	unsigned int size = fifo->mask + 1;
00000c  68a0              LDR      r0,[r4,#8]
00000e  f1000901          ADD      r9,r0,#1
;;;57     	unsigned int l;
;;;58     
;;;59     	off &= fifo->mask;
000012  68a0              LDR      r0,[r4,#8]
000014  4005              ANDS     r5,r5,r0
;;;60     
;;;61     	l = min(len, size - off);
000016  eba90005          SUB      r0,r9,r5
00001a  42b8              CMP      r0,r7
00001c  d901              BLS      |L3.34|
00001e  4638              MOV      r0,r7
000020  e001              B        |L3.38|
                  |L3.34|
000022  eba90005          SUB      r0,r9,r5
                  |L3.38|
000026  4680              MOV      r8,r0
;;;62     
;;;63     	ly_memcpy(dst, fifo->data + off, l);
000028  68e0              LDR      r0,[r4,#0xc]
00002a  1941              ADDS     r1,r0,r5
00002c  4642              MOV      r2,r8
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       ly_memcpy
;;;64     	ly_memcpy(dst + l, fifo->data, len - l);
000034  eba70208          SUB      r2,r7,r8
000038  eb060008          ADD      r0,r6,r8
00003c  68e1              LDR      r1,[r4,#0xc]
00003e  f7fffffe          BL       ly_memcpy
;;;65     	
;;;66     }
000042  e8bd87f0          POP      {r4-r10,pc}
;;;67     
                          ENDP


                          AREA ||i.kfifo_in||, CODE, READONLY, ALIGN=1

                  kfifo_in PROC
;;;37     
;;;38     unsigned int kfifo_in(struct kfifo *fifo,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;39     		const unsigned char* buf, unsigned int len)
;;;40     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;41     	unsigned int l;
;;;42     
;;;43     	l = (fifo->mask + 1) - (fifo->in - fifo->out);
00000a  e9d40100          LDRD     r0,r1,[r4,#0]
00000e  1a41              SUBS     r1,r0,r1
000010  68a0              LDR      r0,[r4,#8]
000012  1c40              ADDS     r0,r0,#1
000014  1a46              SUBS     r6,r0,r1
;;;44     	if (len > l)
000016  42b5              CMP      r5,r6
000018  d900              BLS      |L4.28|
;;;45     		len = l;
00001a  4635              MOV      r5,r6
                  |L4.28|
;;;46     
;;;47     	kfifo_copy_in(fifo, buf, len, fifo->in);
00001c  462a              MOV      r2,r5
00001e  4639              MOV      r1,r7
000020  4620              MOV      r0,r4
000022  6823              LDR      r3,[r4,#0]
000024  f7fffffe          BL       kfifo_copy_in
;;;48     	fifo->in += len;
000028  6820              LDR      r0,[r4,#0]
00002a  4428              ADD      r0,r0,r5
00002c  6020              STR      r0,[r4,#0]
;;;49     
;;;50     	return len;
00002e  4628              MOV      r0,r5
;;;51     }
000030  e8bd81f0          POP      {r4-r8,pc}
;;;52     
                          ENDP


                          AREA ||i.kfifo_out||, CODE, READONLY, ALIGN=1

                  kfifo_out PROC
;;;67     
;;;68     unsigned int kfifo_out(struct kfifo *fifo,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;69     		void *buf, unsigned int len)
;;;70     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;71     	unsigned int l;
;;;72     
;;;73     	l = fifo->in - fifo->out;
00000a  e9d40100          LDRD     r0,r1,[r4,#0]
00000e  1a46              SUBS     r6,r0,r1
;;;74     	if (len > l)		
000010  42b5              CMP      r5,r6
000012  d900              BLS      |L5.22|
;;;75     		len = l;
000014  4635              MOV      r5,r6
                  |L5.22|
;;;76     
;;;77     	kfifo_copy_out(fifo, buf, len, fifo->out);
000016  462a              MOV      r2,r5
000018  4639              MOV      r1,r7
00001a  4620              MOV      r0,r4
00001c  6863              LDR      r3,[r4,#4]
00001e  f7fffffe          BL       kfifo_copy_out
;;;78     
;;;79     	fifo->out += len;
000022  6860              LDR      r0,[r4,#4]
000024  4428              ADD      r0,r0,r5
000026  6060              STR      r0,[r4,#4]
;;;80     
;;;81     	return len;
000028  4628              MOV      r0,r5
;;;82     }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;83     
                          ENDP

