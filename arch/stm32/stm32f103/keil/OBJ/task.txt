; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\obj\task.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\task.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\kernel -I.\app -I.\drivers\UART -I.\board -I.\board\Exception\Systick -I.\board\Interrupt -I.\board\System_Init -I.\board\Exception\ErrorHandler -I.\board\Register -I..\..\..\..\lib\include -I.\board\Delay -I..\..\..\..\components\shell -I..\..\..\..\lib\include -I..\..\..\..\lib\list -I..\..\..\..\lib\ringbuffer -I.\drivers\LED -I..\..\..\..\board\arm\cortex-m3 -I..\..\..\..\..\ARM_OS -I.\RTE\_liyou -ID:\36Keil_5_MDK\install\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\36Keil_5_MDK\install\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DSTM32F10X_HD --omf_browse=.\obj\task.crf ..\..\..\..\kernel\task.c]
                          THUMB

                          AREA ||i.__thread_exit||, CODE, READONLY, ALIGN=2

                  __thread_exit PROC
;;;26     
;;;27     static void __thread_exit(void)
000000  b570              PUSH     {r4-r6,lr}
;;;28     {
;;;29         struct ly_task *thread;
;;;30         signed long level;
;;;31     
;;;32         thread = get_current_task();
000002  480a              LDR      r0,|L1.44|
000004  6804              LDR      r4,[r0,#0]  ; ly_current_thread
;;;33     
;;;34         level = interrupt_disable();
000006  f7fffffe          BL       interrupt_disable
00000a  4605              MOV      r5,r0
;;;35     
;;;36         ly_remove_ready_task(thread);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       ly_remove_ready_task
;;;37     
;;;38         __timer_stop(&thread->task_timer);
000012  f1040028          ADD      r0,r4,#0x28
000016  f7fffffe          BL       __timer_stop
;;;39     
;;;40         thread->stat = LY_THREAD_CLOSE;
00001a  2001              MOVS     r0,#1
00001c  7520              STRB     r0,[r4,#0x14]
;;;41     
;;;42     	interrupt_enable(level);
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       interrupt_enable
;;;43     
;;;44         ly_schedule();
000024  f7fffffe          BL       ly_schedule
;;;45     }
000028  bd70              POP      {r4-r6,pc}
;;;46     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ly_current_thread

                          AREA ||i.__thread_timeout||, CODE, READONLY, ALIGN=1

                  __thread_timeout PROC
;;;46     
;;;47     static void __thread_timeout(void *parameter)
000000  b570              PUSH     {r4-r6,lr}
;;;48     {
000002  4604              MOV      r4,r0
;;;49     	struct ly_task *thread;
;;;50         signed long level;
;;;51     
;;;52         thread = (struct ly_task *)parameter;
000004  4625              MOV      r5,r4
;;;53     
;;;54         level = interrupt_disable();
000006  f7fffffe          BL       interrupt_disable
00000a  4606              MOV      r6,r0
;;;55     
;;;56         thread->error = -LY_ETIMEOUT;
00000c  f06f0001          MVN      r0,#1
000010  6228              STR      r0,[r5,#0x20]
;;;57     
;;;58         list_del(&(thread->tlist));
000012  f1050044          ADD      r0,r5,#0x44
000016  f7fffffe          BL       list_del
;;;59     
;;;60         __schedule_insert_thread(thread);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       __schedule_insert_thread
;;;61     
;;;62         interrupt_enable(level);
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       interrupt_enable
;;;63     
;;;64         ly_schedule();
000026  f7fffffe          BL       ly_schedule
;;;65     }
00002a  bd70              POP      {r4-r6,pc}
;;;66     
                          ENDP


                          AREA ||i.list_del||, CODE, READONLY, ALIGN=1

                  list_del PROC
;;;46     
;;;47     static inline void list_del(struct list_head *entry)
000000  e9d02100          LDRD     r2,r1,[r0,#0]
;;;48     {
;;;49         entry->next->prev = entry->prev;
000004  6051              STR      r1,[r2,#4]
;;;50         entry->prev->next = entry->next;
000006  e9d01200          LDRD     r1,r2,[r0,#0]
00000a  6011              STR      r1,[r2,#0]
;;;51         entry->next = entry;
00000c  6000              STR      r0,[r0,#0]
;;;52         entry->prev = entry;
00000e  6040              STR      r0,[r0,#4]
;;;53     }
000010  4770              BX       lr
;;;54     
                          ENDP


                          AREA ||i.ly_remove_ready_task||, CODE, READONLY, ALIGN=2

                  ly_remove_ready_task PROC
;;;184    
;;;185    void ly_remove_ready_task(struct ly_task *task)
000000  b570              PUSH     {r4-r6,lr}
;;;186    {
000002  4604              MOV      r4,r0
;;;187        signed long level;
;;;188    
;;;189        level = interrupt_disable();
000004  f7fffffe          BL       interrupt_disable
000008  4605              MOV      r5,r0
;;;190    	
;;;191        list_del(&(task->tlist));
00000a  f1040044          ADD      r0,r4,#0x44
00000e  f7fffffe          BL       list_del
;;;192    
;;;193    	if (list_empty(&(ly_thread_priority_table[task->current_priority])))
000012  7d61              LDRB     r1,[r4,#0x15]
000014  4a09              LDR      r2,|L4.60|
000016  eb0200c1          ADD      r0,r2,r1,LSL #3
00001a  6801              LDR      r1,[r0,#0]
00001c  4281              CMP      r1,r0
00001e  d101              BNE      |L4.36|
000020  2101              MOVS     r1,#1
000022  e000              B        |L4.38|
                  |L4.36|
000024  2100              MOVS     r1,#0
                  |L4.38|
000026  b129              CBZ      r1,|L4.52|
;;;194        {
;;;195            ly_thread_ready_priority_group &= ~task->number_mask;
000028  4805              LDR      r0,|L4.64|
00002a  69e1              LDR      r1,[r4,#0x1c]
00002c  6800              LDR      r0,[r0,#0]  ; ly_thread_ready_priority_group
00002e  4388              BICS     r0,r0,r1
000030  4903              LDR      r1,|L4.64|
000032  6008              STR      r0,[r1,#0]  ; ly_thread_ready_priority_group
                  |L4.52|
;;;196        }
;;;197    
;;;198        interrupt_enable(level);
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       interrupt_enable
;;;199    }
00003a  bd70              POP      {r4-r6,pc}
;;;200    
                          ENDP

                  |L4.60|
                          DCD      ly_thread_priority_table
                  |L4.64|
                          DCD      ly_thread_ready_priority_group

                          AREA ||i.ly_task_init||, CODE, READONLY, ALIGN=2

                  ly_task_init PROC
;;;66     
;;;67     unsigned int ly_task_init(struct ly_task *thread,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;68                             void (*entry)(void *parameter),
;;;69                             void             *parameter,
;;;70                             void             *stack_start,
;;;71                             unsigned int      stack_size,
;;;72                             unsigned char     priority,
;;;73                             unsigned int      tick)
;;;74     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dda80a          LDRD     r10,r8,[sp,#0x28]
000010  f8dd9030          LDR      r9,[sp,#0x30]
;;;75         list_init(&(thread->tlist));
000014  f1040044          ADD      r0,r4,#0x44
000018  6000              STR      r0,[r0,#0]
00001a  6040              STR      r0,[r0,#4]
00001c  bf00              NOP      
;;;76     
;;;77         thread->entry = (void*)entry;
00001e  6065              STR      r5,[r4,#4]
;;;78         thread->parameter = parameter;
000020  60a6              STR      r6,[r4,#8]
;;;79         thread->stack_addr = stack_start;
000022  60e7              STR      r7,[r4,#0xc]
;;;80         thread->stack_size = stack_size;
000024  f8c4a010          STR      r10,[r4,#0x10]
;;;81     
;;;82     	thread->sp =
000028  e9d43c03          LDRD     r3,r12,[r4,#0xc]
00002c  4463              ADD      r3,r3,r12
00002e  1f1a              SUBS     r2,r3,#4
000030  4b0d              LDR      r3,|L5.104|
000032  e9d40101          LDRD     r0,r1,[r4,#4]
000036  f7fffffe          BL       ly_stack_init
00003a  6020              STR      r0,[r4,#0]
;;;83     	(void*)ly_stack_init(thread->entry, thread->parameter,
;;;84     		                (void*)((char*)thread->stack_addr + 
;;;85                             thread->stack_size - sizeof(unsigned long)), 
;;;86                             (void *)__thread_exit);
;;;87     	
;;;88         thread->init_priority = priority;
00003c  f8848016          STRB     r8,[r4,#0x16]
;;;89     	thread->current_priority = priority;
000040  f8848015          STRB     r8,[r4,#0x15]
;;;90     	thread->error = LY_EOK;
000044  2000              MOVS     r0,#0
000046  6220              STR      r0,[r4,#0x20]
;;;91     	thread->stat = LY_THREAD_INIT;
000048  7520              STRB     r0,[r4,#0x14]
;;;92     	thread->init_tick = tick;
00004a  f8c49018          STR      r9,[r4,#0x18]
;;;93     	thread->remaining_tick = tick;
00004e  f8c49024          STR      r9,[r4,#0x24]
;;;94     
;;;95     	ly_timer_init(&(thread->task_timer), __thread_timeout , thread , 0, LY_TIMER_FLAG_ONE_SHOT);
000052  4603              MOV      r3,r0
000054  4622              MOV      r2,r4
000056  4905              LDR      r1,|L5.108|
000058  9000              STR      r0,[sp,#0]
00005a  f1040028          ADD      r0,r4,#0x28
00005e  f7fffffe          BL       ly_timer_init
;;;96     
;;;97     	return LY_EOK;
000062  2000              MOVS     r0,#0
;;;98     }
000064  e8bd8ff8          POP      {r3-r11,pc}
;;;99     
                          ENDP

                  |L5.104|
                          DCD      __thread_exit
                  |L5.108|
                          DCD      __thread_timeout

                          AREA ||i.ly_task_resume||, CODE, READONLY, ALIGN=1

                  ly_task_resume PROC
;;;120    
;;;121    int ly_task_resume(struct ly_task *task)
000000  b570              PUSH     {r4-r6,lr}
;;;122    {
000002  4604              MOV      r4,r0
;;;123        signed long level;
;;;124    
;;;125        if ((task->stat & LY_THREAD_SUSPEND) != LY_THREAD_SUSPEND)
000004  7d20              LDRB     r0,[r4,#0x14]
000006  f0000004          AND      r0,r0,#4
00000a  2804              CMP      r0,#4
00000c  d002              BEQ      |L6.20|
;;;126    		return -LY_ERROR;
00000e  f04f30ff          MOV      r0,#0xffffffff
                  |L6.18|
;;;127    
;;;128    
;;;129        level = interrupt_disable();
;;;130    
;;;131    	task->stat = LY_THREAD_READY | (task->stat & ~LY_THREAD_STAT_MASK);;
;;;132    
;;;133        list_del(&(task->tlist));
;;;134    
;;;135        __timer_stop(&task->task_timer);
;;;136    
;;;137    	interrupt_enable(level);
;;;138    
;;;139        __schedule_insert_thread(task);
;;;140    
;;;141        return LY_EOK;
;;;142    }
000012  bd70              POP      {r4-r6,pc}
                  |L6.20|
000014  f7fffffe          BL       interrupt_disable
000018  4605              MOV      r5,r0                 ;129
00001a  7d20              LDRB     r0,[r4,#0x14]         ;131
00001c  f0200007          BIC      r0,r0,#7              ;131
000020  f0400002          ORR      r0,r0,#2              ;131
000024  7520              STRB     r0,[r4,#0x14]         ;131
000026  f1040044          ADD      r0,r4,#0x44           ;133
00002a  f7fffffe          BL       list_del
00002e  f1040028          ADD      r0,r4,#0x28           ;135
000032  f7fffffe          BL       __timer_stop
000036  4628              MOV      r0,r5                 ;137
000038  f7fffffe          BL       interrupt_enable
00003c  4620              MOV      r0,r4                 ;139
00003e  f7fffffe          BL       __schedule_insert_thread
000042  2000              MOVS     r0,#0                 ;141
000044  e7e5              B        |L6.18|
;;;143    
                          ENDP


                          AREA ||i.ly_task_set_suspend_state||, CODE, READONLY, ALIGN=1

                  ly_task_set_suspend_state PROC
;;;99     
;;;100    static void ly_task_set_suspend_state(struct ly_task *thread, int suspend_flag)
000000  2207              MOVS     r2,#7
;;;101    {
;;;102        unsigned char stat = LY_THREAD_SUSPEND_UNINTERRUPTIBLE;
;;;103    
;;;104        switch (suspend_flag)
000002  b121              CBZ      r1,|L7.14|
000004  2901              CMP      r1,#1
000006  d004              BEQ      |L7.18|
000008  2902              CMP      r1,#2
00000a  d106              BNE      |L7.26|
00000c  e003              B        |L7.22|
                  |L7.14|
;;;105        {
;;;106        case LY_INTERRUPTIBLE:
;;;107            stat = LY_THREAD_SUSPEND_INTERRUPTIBLE;
00000e  2204              MOVS     r2,#4
;;;108            break;
000010  e004              B        |L7.28|
                  |L7.18|
;;;109        case LY_KILLABLE:
;;;110            stat = LY_THREAD_SUSPEND_KILLABLE;
000012  2206              MOVS     r2,#6
;;;111            break;
000014  e002              B        |L7.28|
                  |L7.22|
;;;112        case LY_UNINTERRUPTIBLE:
;;;113            stat = LY_THREAD_SUSPEND_UNINTERRUPTIBLE;
000016  2207              MOVS     r2,#7
;;;114            break;
000018  e000              B        |L7.28|
                  |L7.26|
;;;115        default:
;;;116            break;
00001a  bf00              NOP      
                  |L7.28|
00001c  bf00              NOP                            ;108
;;;117        }
;;;118        thread->stat = stat | (thread->stat & ~LY_THREAD_STAT_MASK);
00001e  7d03              LDRB     r3,[r0,#0x14]
000020  f0230307          BIC      r3,r3,#7
000024  4313              ORRS     r3,r3,r2
000026  7503              STRB     r3,[r0,#0x14]
;;;119    }
000028  4770              BX       lr
;;;120    
                          ENDP


                          AREA ||i.ly_task_startup||, CODE, READONLY, ALIGN=1

                  ly_task_startup PROC
;;;173    
;;;174    unsigned int ly_task_startup(struct ly_task *task)
000000  b510              PUSH     {r4,lr}
;;;175    {
000002  4604              MOV      r4,r0
;;;176    	task->current_priority = task->init_priority;
000004  7da0              LDRB     r0,[r4,#0x16]
000006  7560              STRB     r0,[r4,#0x15]
;;;177    	task->number_mask = 1 << (task->current_priority);
000008  7d61              LDRB     r1,[r4,#0x15]
00000a  2001              MOVS     r0,#1
00000c  4088              LSLS     r0,r0,r1
00000e  61e0              STR      r0,[r4,#0x1c]
;;;178    	task->stat = LY_THREAD_SUSPEND;
000010  2004              MOVS     r0,#4
000012  7520              STRB     r0,[r4,#0x14]
;;;179    
;;;180    	ly_task_resume(task);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       ly_task_resume
;;;181    	
;;;182    	return LY_EOK;
00001a  2000              MOVS     r0,#0
;;;183    }
00001c  bd10              POP      {r4,pc}
;;;184    
                          ENDP


                          AREA ||i.ly_task_suspend||, CODE, READONLY, ALIGN=1

                  ly_task_suspend PROC
;;;168    
;;;169    signed long ly_task_suspend(struct ly_task *thread)
000000  b510              PUSH     {r4,lr}
;;;170    {
000002  4604              MOV      r4,r0
;;;171        return ly_task_suspend_with_flag(thread, LY_UNINTERRUPTIBLE);
000004  2102              MOVS     r1,#2
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       ly_task_suspend_with_flag
;;;172    }
00000c  bd10              POP      {r4,pc}
;;;173    
                          ENDP


                          AREA ||i.ly_task_suspend_with_flag||, CODE, READONLY, ALIGN=2

                  ly_task_suspend_with_flag PROC
;;;143    
;;;144    signed long ly_task_suspend_with_flag(struct ly_task *thread, int suspend_flag)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;145    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;146        signed long stat;
;;;147        signed long level;
;;;148    
;;;149        stat = thread->stat & LY_THREAD_STAT_MASK;
000008  7d20              LDRB     r0,[r4,#0x14]
00000a  f0000507          AND      r5,r0,#7
;;;150        
;;;151    	if ((stat != LY_THREAD_READY) && (stat != LY_THREAD_RUNNING))
00000e  2d02              CMP      r5,#2
000010  d005              BEQ      |L10.30|
000012  2d03              CMP      r5,#3
000014  d003              BEQ      |L10.30|
;;;152    		return -LY_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L10.26|
;;;153    
;;;154        if ((stat == LY_THREAD_RUNNING) && (thread != get_current_task()))
;;;155    		return -LY_ERROR;
;;;156    	
;;;157    	level = interrupt_disable();
;;;158    
;;;159        ly_remove_ready_task(thread);
;;;160        ly_task_set_suspend_state(thread, suspend_flag);
;;;161    
;;;162        ly_timer_stop(&(thread->task_timer));
;;;163    
;;;164    	interrupt_enable(level);
;;;165    
;;;166        return 0;
;;;167    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L10.30|
00001e  2d03              CMP      r5,#3                 ;154
000020  d105              BNE      |L10.46|
000022  480c              LDR      r0,|L10.84|
000024  6800              LDR      r0,[r0,#0]            ;154  ; ly_current_thread
000026  4284              CMP      r4,r0                 ;154
000028  d001              BEQ      |L10.46|
00002a  1f28              SUBS     r0,r5,#4              ;155
00002c  e7f5              B        |L10.26|
                  |L10.46|
00002e  f7fffffe          BL       interrupt_disable
000032  4607              MOV      r7,r0                 ;157
000034  4620              MOV      r0,r4                 ;159
000036  f7fffffe          BL       ly_remove_ready_task
00003a  4631              MOV      r1,r6                 ;160
00003c  4620              MOV      r0,r4                 ;160
00003e  f7fffffe          BL       ly_task_set_suspend_state
000042  f1040028          ADD      r0,r4,#0x28           ;162
000046  f7fffffe          BL       ly_timer_stop
00004a  4638              MOV      r0,r7                 ;164
00004c  f7fffffe          BL       interrupt_enable
000050  2000              MOVS     r0,#0                 ;166
000052  e7e2              B        |L10.26|
;;;168    
                          ENDP

                  |L10.84|
                          DCD      ly_current_thread

                          AREA ||i.ly_thread_idle_init||, CODE, READONLY, ALIGN=2

                  ly_thread_idle_init PROC
;;;212    
;;;213    void ly_thread_idle_init(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;214    {
;;;215        ly_task_init(&ly_system_thread,
000002  2020              MOVS     r0,#0x20
000004  211e              MOVS     r1,#0x1e
000006  0102              LSLS     r2,r0,#4
000008  4b06              LDR      r3,|L11.36|
00000a  e9cd2100          STRD     r2,r1,[sp,#0]
00000e  9002              STR      r0,[sp,#8]
000010  2200              MOVS     r2,#0
000012  4905              LDR      r1,|L11.40|
000014  4805              LDR      r0,|L11.44|
000016  f7fffffe          BL       ly_task_init
;;;216                ly_thread_system_entry,
;;;217                NULL,
;;;218                ly_system_stack,
;;;219                sizeof(ly_system_stack),
;;;220                LY_THREAD_PRIORITY_MAX - 2,
;;;221                32);
;;;222    
;;;223    	ly_task_startup(&ly_system_thread);
00001a  4804              LDR      r0,|L11.44|
00001c  f7fffffe          BL       ly_task_startup
;;;224    }
000020  bd0e              POP      {r1-r3,pc}
;;;225    
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
                          DCD      ly_system_stack
                  |L11.40|
                          DCD      ly_thread_system_entry
                  |L11.44|
                          DCD      ly_system_thread

                          AREA ||i.ly_thread_system_entry||, CODE, READONLY, ALIGN=1

                  ly_thread_system_entry PROC
;;;207    
;;;208    void ly_thread_system_entry(void *parameter)
000000  b510              PUSH     {r4,lr}
;;;209    {
000002  4604              MOV      r4,r0
;;;210    	finsh_shell_entry();
000004  f7fffffe          BL       finsh_shell_entry
;;;211    }
000008  bd10              POP      {r4,pc}
;;;212    
                          ENDP


                          AREA ||i.os_startup||, CODE, READONLY, ALIGN=2

                  os_startup PROC
;;;225    
;;;226    void os_startup(void)
000000  b570              PUSH     {r4-r6,lr}
;;;227    { 
;;;228    	interrupt_disable();
000002  f7fffffe          BL       interrupt_disable
;;;229    
;;;230    	stm32_Sys_Init(9, 4);
000006  2509              MOVS     r5,#9
000008  2404              MOVS     r4,#4
00000a  2d01              CMP      r5,#1
00000c  d976              BLS      |L13.252|
00000e  2d11              CMP      r5,#0x11
000010  d274              BCS      |L13.252|
000012  b13c              CBZ      r4,|L13.36|
000014  2c01              CMP      r4,#1
000016  d005              BEQ      |L13.36|
000018  2c02              CMP      r4,#2
00001a  d003              BEQ      |L13.36|
00001c  2c03              CMP      r4,#3
00001e  d001              BEQ      |L13.36|
000020  2c04              CMP      r4,#4
000022  d16b              BNE      |L13.252|
                  |L13.36|
000024  2200              MOVS     r2,#0
000026  4b3e              LDR      r3,|L13.288|
000028  611a              STR      r2,[r3,#0x10]
00002a  60da              STR      r2,[r3,#0xc]
00002c  2214              MOVS     r2,#0x14
00002e  615a              STR      r2,[r3,#0x14]
000030  2200              MOVS     r2,#0
000032  619a              STR      r2,[r3,#0x18]
000034  61da              STR      r2,[r3,#0x1c]
000036  461a              MOV      r2,r3
000038  6812              LDR      r2,[r2,#0]
00003a  f0420201          ORR      r2,r2,#1
00003e  601a              STR      r2,[r3,#0]
000040  461a              MOV      r2,r3
000042  6852              LDR      r2,[r2,#4]
000044  4b37              LDR      r3,|L13.292|
000046  401a              ANDS     r2,r2,r3
000048  4b35              LDR      r3,|L13.288|
00004a  605a              STR      r2,[r3,#4]
00004c  461a              MOV      r2,r3
00004e  6812              LDR      r2,[r2,#0]
000050  4b35              LDR      r3,|L13.296|
000052  401a              ANDS     r2,r2,r3
000054  4b32              LDR      r3,|L13.288|
000056  601a              STR      r2,[r3,#0]
000058  461a              MOV      r2,r3
00005a  6812              LDR      r2,[r2,#0]
00005c  f4222280          BIC      r2,r2,#0x40000
000060  601a              STR      r2,[r3,#0]
000062  461a              MOV      r2,r3
000064  6852              LDR      r2,[r2,#4]
000066  f42202fe          BIC      r2,r2,#0x7f0000
00006a  605a              STR      r2,[r3,#4]
00006c  2200              MOVS     r2,#0
00006e  609a              STR      r2,[r3,#8]
000070  4611              MOV      r1,r2
000072  4619              MOV      r1,r3
000074  6809              LDR      r1,[r1,#0]
000076  f4413180          ORR      r1,r1,#0x10000
00007a  461a              MOV      r2,r3
00007c  6011              STR      r1,[r2,#0]
00007e  bf00              NOP      
                  |L13.128|
000080  4927              LDR      r1,|L13.288|
000082  6809              LDR      r1,[r1,#0]
000084  0c49              LSRS     r1,r1,#17
000086  2900              CMP      r1,#0
000088  d0fa              BEQ      |L13.128|
00008a  f44f6180          MOV      r1,#0x400
00008e  4a24              LDR      r2,|L13.288|
000090  6051              STR      r1,[r2,#4]
000092  1ead              SUBS     r5,r5,#2
000094  4611              MOV      r1,r2
000096  6849              LDR      r1,[r1,#4]
000098  ea414185          ORR      r1,r1,r5,LSL #18
00009c  6051              STR      r1,[r2,#4]
00009e  4611              MOV      r1,r2
0000a0  6849              LDR      r1,[r1,#4]
0000a2  f4413180          ORR      r1,r1,#0x10000
0000a6  6051              STR      r1,[r2,#4]
0000a8  4920              LDR      r1,|L13.300|
0000aa  6809              LDR      r1,[r1,#0]
0000ac  f0410132          ORR      r1,r1,#0x32
0000b0  4a1e              LDR      r2,|L13.300|
0000b2  6011              STR      r1,[r2,#0]
0000b4  491a              LDR      r1,|L13.288|
0000b6  6809              LDR      r1,[r1,#0]
0000b8  f0417180          ORR      r1,r1,#0x1000000
0000bc  4a18              LDR      r2,|L13.288|
0000be  6011              STR      r1,[r2,#0]
0000c0  bf00              NOP      
                  |L13.194|
0000c2  4917              LDR      r1,|L13.288|
0000c4  6809              LDR      r1,[r1,#0]
0000c6  0e49              LSRS     r1,r1,#25
0000c8  2900              CMP      r1,#0
0000ca  d0fa              BEQ      |L13.194|
0000cc  4914              LDR      r1,|L13.288|
0000ce  6849              LDR      r1,[r1,#4]
0000d0  f0410102          ORR      r1,r1,#2
0000d4  4a12              LDR      r2,|L13.288|
0000d6  6051              STR      r1,[r2,#4]
0000d8  4611              MOV      r1,r2
0000da  6849              LDR      r1,[r1,#4]
0000dc  b2c8              UXTB     r0,r1
0000de  2802              CMP      r0,#2
0000e0  d007              BEQ      |L13.242|
0000e2  bf00              NOP      
                  |L13.228|
0000e4  1080              ASRS     r0,r0,#2
0000e6  f0000003          AND      r0,r0,#3
0000ea  2802              CMP      r0,#2
0000ec  d1fa              BNE      |L13.228|
0000ee  e001              B        |L13.244|
0000f0  e004              B        |L13.252|
                  |L13.242|
0000f2  bf00              NOP      
                  |L13.244|
0000f4  4620              MOV      r0,r4
0000f6  f7fffffe          BL       __NVIC_SetPriorityGrouping
0000fa  e000              B        |L13.254|
                  |L13.252|
0000fc  bf00              NOP      
                  |L13.254|
;;;231    	
;;;232    	uart_init(72,115200);
0000fe  f44f31e1          MOV      r1,#0x1c200
000102  2048              MOVS     r0,#0x48
000104  f7fffffe          BL       uart_init
;;;233    	
;;;234    	show_version();
000108  f7fffffe          BL       show_version
;;;235    
;;;236    	system_scheduler_init();
00010c  f7fffffe          BL       system_scheduler_init
;;;237    	
;;;238    	system_timer_init();
000110  f7fffffe          BL       system_timer_init
;;;239    	
;;;240    	ly_thread_idle_init();
000114  f7fffffe          BL       ly_thread_idle_init
;;;241    	
;;;242    	Systick_init();
000118  f7fffffe          BL       Systick_init
;;;243    
;;;244       
;;;245    }	
00011c  bd70              POP      {r4-r6,pc}
;;;246    
                          ENDP

00011e  0000              DCW      0x0000
                  |L13.288|
                          DCD      0x40021000
                  |L13.292|
                          DCD      0xf8ff0000
                  |L13.296|
                          DCD      0xfef6ffff
                  |L13.300|
                          DCD      0x40022000

                          AREA ||i.show_version||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  show_version PROC
;;;200    
;;;201    void show_version(void)
000000  b510              PUSH     {r4,lr}
;;;202    {
;;;203    	printf("\r\n====== START LY_OS NOW ======\r\n");
000002  a006              ADR      r0,|L14.28|
000004  f7fffffe          BL       __2printf
;;;204    	printf("%s\r\n", boot_log_buf);    
000008  490d              LDR      r1,|L14.64|
00000a  a00e              ADR      r0,|L14.68|
00000c  f7fffffe          BL       __2printf
;;;205    	printf("Version: %s build %s\r\n\r\n", LY_OS_SW_VERSION, __DATE__);
000010  a20e              ADR      r2,|L14.76|
000012  a111              ADR      r1,|L14.88|
000014  a012              ADR      r0,|L14.96|
000016  f7fffffe          BL       __2printf
;;;206    }
00001a  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  |L14.28|
00001c  0d0a3d3d          DCB      "\r\n====== START LY_OS NOW ======\r\n",0
000020  3d3d3d3d
000024  20535441
000028  5254204c
00002c  595f4f53
000030  204e4f57
000034  203d3d3d
000038  3d3d3d0d
00003c  0a00    
00003e  00                DCB      0
00003f  00                DCB      0
                  |L14.64|
                          DCD      boot_log_buf
                  |L14.68|
000044  25730d0a          DCB      "%s\r\n",0
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L14.76|
00004c  4a756c20          DCB      "Jul 28 2023",0
000050  32382032
000054  30323300
                  |L14.88|
000058  312e302e          DCB      "1.0.0",0
00005c  3000    
00005e  00                DCB      0
00005f  00                DCB      0
                  |L14.96|
000060  56657273          DCB      "Version: %s build %s\r\n\r\n",0
000064  696f6e3a
000068  20257320
00006c  6275696c
000070  64202573
000074  0d0a0d0a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ly_system_stack
                          %        512
                  ly_system_thread
                          %        80

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  boot_log_buf
000000  5f5f5f20          DCB      0x5f,0x5f,0x5f,0x20
000004  5f5f2020          DCB      0x5f,0x5f,0x20,0x20
000008  205f5f20          DCB      0x20,0x5f,0x5f,0x20
00000c  205f5f5f          DCB      0x20,0x5f,0x5f,0x5f
000010  5f202020          DCB      0x5f,0x20,0x20,0x20
000014  5f5f5f5f          DCB      0x5f,0x5f,0x5f,0x5f
000018  5f5f0909          DCB      0x5f,0x5f,0x09,0x09
00001c  090d0a7c          DCB      0x09,0x0d,0x0a,0x7c
000020  207c205c          DCB      0x20,0x7c,0x20,0x5c
000024  5c202020          DCB      0x5c,0x20,0x20,0x20
000028  2f2f2f2f          DCB      0x2f,0x2f,0x2f,0x2f
00002c  205f5f20          DCB      0x20,0x5f,0x5f,0x20
000030  5c5c2f2f          DCB      0x5c,0x5c,0x2f,0x2f
000034  5f5f5f5f          DCB      0x5f,0x5f,0x5f,0x5f
000038  7c202020          DCB      0x7c,0x20,0x20,0x20
00003c  200d0a7c          DCB      0x20,0x0d,0x0a,0x7c
000040  207c2020          DCB      0x20,0x7c,0x20,0x20
000044  5c5c202f          DCB      0x5c,0x5c,0x20,0x2f
000048  2f207c20          DCB      0x2f,0x20,0x7c,0x20
00004c  7c20207c          DCB      0x7c,0x20,0x20,0x7c
000050  207c7c7c          DCB      0x20,0x7c,0x7c,0x7c
000054  09092020          DCB      0x09,0x09,0x20,0x20
000058  20202020          DCB      0x20,0x20,0x20,0x20
00005c  200d0a7c          DCB      0x20,0x0d,0x0a,0x7c
000060  207c2020          DCB      0x20,0x7c,0x20,0x20
000064  205c562f          DCB      0x20,0x5c,0x56,0x2f
000068  20207c20          DCB      0x20,0x20,0x7c,0x20
00006c  7c20207c          DCB      0x7c,0x20,0x20,0x7c
000070  207c5c5c          DCB      0x20,0x7c,0x5c,0x5c
000074  5f5f5f5f          DCB      0x5f,0x5f,0x5f,0x5f
000078  20202020          DCB      0x20,0x20,0x20,0x20
00007c  20202020          DCB      0x20,0x20,0x20,0x20
000080  20200d0a          DCB      0x20,0x20,0x0d,0x0a
000084  7c207c20          DCB      0x7c,0x20,0x7c,0x20
000088  20207c20          DCB      0x20,0x20,0x7c,0x20
00008c  7c20207c          DCB      0x7c,0x20,0x20,0x7c
000090  207c2020          DCB      0x20,0x7c,0x20,0x20
000094  7c207c20          DCB      0x7c,0x20,0x7c,0x20
000098  20202020          DCB      0x20,0x20,0x20,0x20
00009c  5c5c2020          DCB      0x5c,0x5c,0x20,0x20
0000a0  2020200d          DCB      0x20,0x20,0x20,0x0d
0000a4  0a7c207c          DCB      0x0a,0x7c,0x20,0x7c
0000a8  5f5f5f7c          DCB      0x5f,0x5f,0x5f,0x7c
0000ac  207c2020          DCB      0x20,0x7c,0x20,0x20
0000b0  7c207c5f          DCB      0x7c,0x20,0x7c,0x5f
0000b4  5f7c207c          DCB      0x5f,0x7c,0x20,0x7c
0000b8  5f5f5f5f          DCB      0x5f,0x5f,0x5f,0x5f
0000bc  5f7c7c20          DCB      0x5f,0x7c,0x7c,0x20
0000c0  20202020          DCB      0x20,0x20,0x20,0x20
0000c4  20200d0a          DCB      0x20,0x20,0x0d,0x0a
0000c8  7c5f5f5f          DCB      0x7c,0x5f,0x5f,0x5f
0000cc  5f5f7c5f          DCB      0x5f,0x5f,0x7c,0x5f
0000d0  7c20205c          DCB      0x7c,0x20,0x20,0x5c
0000d4  5c5f5f5f          DCB      0x5c,0x5f,0x5f,0x5f
0000d8  5f2f2f7c          DCB      0x5f,0x2f,0x2f,0x7c
0000dc  5f5f5f5f          DCB      0x5f,0x5f,0x5f,0x5f
0000e0  2f2f2020          DCB      0x2f,0x2f,0x20,0x20
0000e4  20202020          DCB      0x20,0x20,0x20,0x20
0000e8  200d0a00          DCB      0x20,0x0d,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ly_current_thread
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\kernel\\task.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_task_c_104cbba0____REV16|
#line 464 ".\\board\\Interrupt\\Nvic_armcc.h"
|__asm___6_task_c_104cbba0____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_task_c_104cbba0____REVSH|
#line 479
|__asm___6_task_c_104cbba0____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_task_c_104cbba0____RRX|
#line 666
|__asm___6_task_c_104cbba0____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
