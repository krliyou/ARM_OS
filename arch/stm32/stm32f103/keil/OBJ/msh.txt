; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\obj\msh.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\msh.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\..\kernel -I.\app -I.\drivers\UART -I.\board -I.\board\Exception\Systick -I.\board\Interrupt -I.\board\System_Init -I.\board\Exception\ErrorHandler -I.\board\Register -I..\..\..\..\lib\include -I.\board\Delay -I..\..\..\..\components\shell -I..\..\..\..\lib\include -I..\..\..\..\lib\list -I..\..\..\..\lib\ringbuffer -I.\drivers\LED -I..\..\..\..\board\arm\cortex-m3 -I..\..\..\..\..\ARM_OS -I.\RTE\_liyou -ID:\36Keil_5_MDK\install\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\36Keil_5_MDK\install\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=527 -DSTM32F10X_HD -DSTM32F10X_HD --omf_browse=.\obj\msh.crf ..\..\..\..\components\shell\msh.c]
                          THUMB

                          AREA ||i._msh_exec_cmd||, CODE, READONLY, ALIGN=1

                  _msh_exec_cmd PROC
;;;113    
;;;114    static int _msh_exec_cmd(char *cmd, unsigned long length, int *retp)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;115    {
000004  b089              SUB      sp,sp,#0x24
000006  4606              MOV      r6,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
;;;116        int argc;
;;;117        unsigned long cmd0_size = 0;
00000c  2400              MOVS     r4,#0
;;;118        cmd_function_t cmd_func;
;;;119        char *argv[FINSH_ARG_MAX];
;;;120    
;;;121        while (cmd0_size < length && (cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t'))
00000e  e000              B        |L1.18|
                  |L1.16|
;;;122            cmd0_size ++;
000010  1c64              ADDS     r4,r4,#1
                  |L1.18|
000012  4544              CMP      r4,r8                 ;121
000014  d205              BCS      |L1.34|
000016  5d30              LDRB     r0,[r6,r4]            ;121
000018  2820              CMP      r0,#0x20              ;121
00001a  d002              BEQ      |L1.34|
00001c  5d30              LDRB     r0,[r6,r4]            ;121
00001e  2809              CMP      r0,#9                 ;121
000020  d1f6              BNE      |L1.16|
                  |L1.34|
;;;123    
;;;124        if (cmd0_size == 0)
000022  b924              CBNZ     r4,|L1.46|
;;;125            return -1;
000024  f04f30ff          MOV      r0,#0xffffffff
                  |L1.40|
;;;126    
;;;127        cmd_func = msh_get_cmd(cmd, cmd0_size);
;;;128        if (cmd_func == NULL)
;;;129            return -1;
;;;130    
;;;131        ly_memset(argv, 0x00, sizeof(argv));
;;;132        argc = msh_split(cmd, length, argv);
;;;133        if (argc == 0)
;;;134            return -1;
;;;135    
;;;136        *retp = cmd_func(argc, argv);
;;;137        return 0;
;;;138    }
000028  b009              ADD      sp,sp,#0x24
00002a  e8bd83f0          POP      {r4-r9,pc}
                  |L1.46|
00002e  4621              MOV      r1,r4                 ;127
000030  4630              MOV      r0,r6                 ;127
000032  f7fffffe          BL       msh_get_cmd
000036  4605              MOV      r5,r0                 ;127
000038  b915              CBNZ     r5,|L1.64|
00003a  f04f30ff          MOV      r0,#0xffffffff        ;129
00003e  e7f3              B        |L1.40|
                  |L1.64|
000040  2220              MOVS     r2,#0x20              ;131
000042  2100              MOVS     r1,#0                 ;131
000044  a801              ADD      r0,sp,#4              ;131
000046  f7fffffe          BL       ly_memset
00004a  aa01              ADD      r2,sp,#4              ;132
00004c  4641              MOV      r1,r8                 ;132
00004e  4630              MOV      r0,r6                 ;132
000050  f7fffffe          BL       msh_split
000054  4607              MOV      r7,r0                 ;132
000056  b917              CBNZ     r7,|L1.94|
000058  f04f30ff          MOV      r0,#0xffffffff        ;134
00005c  e7e4              B        |L1.40|
                  |L1.94|
00005e  a901              ADD      r1,sp,#4              ;136
000060  4638              MOV      r0,r7                 ;136
000062  47a8              BLX      r5                    ;136
000064  f8c90000          STR      r0,[r9,#0]            ;136
000068  2000              MOVS     r0,#0                 ;137
00006a  e7dd              B        |L1.40|
;;;139    
                          ENDP


                          AREA ||i.msh_auto_complete||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  msh_auto_complete PROC
;;;185    
;;;186    void msh_auto_complete(char *prefix)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;187    {
000004  4681              MOV      r9,r0
;;;188        int length, min_length;
;;;189        const char *name_ptr, *cmd_name;
;;;190        struct finsh_syscall *index;
;;;191    
;;;192        min_length = 0;
000006  2600              MOVS     r6,#0
;;;193        name_ptr = NULL;
000008  2700              MOVS     r7,#0
;;;194    
;;;195        {
;;;196            for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
00000a  481b              LDR      r0,|L2.120|
00000c  6805              LDR      r5,[r0,#0]  ; _syscall_table_begin
00000e  e027              B        |L2.96|
                  |L2.16|
;;;197            {
;;;198                if (ly_strncmp(index->name, "__cmd_", 6) != 0) continue;
000010  2206              MOVS     r2,#6
000012  a11a              ADR      r1,|L2.124|
000014  6828              LDR      r0,[r5,#0]
000016  f7fffffe          BL       ly_strncmp
00001a  b100              CBZ      r0,|L2.30|
00001c  e01f              B        |L2.94|
                  |L2.30|
;;;199    
;;;200                cmd_name = (const char *) &index->name[6];
00001e  6828              LDR      r0,[r5,#0]
000020  f1000806          ADD      r8,r0,#6
;;;201                if (ly_strncmp(prefix, cmd_name, strlen(prefix)) == 0)
000024  4648              MOV      r0,r9
000026  f7fffffe          BL       strlen
00002a  4682              MOV      r10,r0
00002c  4652              MOV      r2,r10
00002e  4641              MOV      r1,r8
000030  4648              MOV      r0,r9
000032  f7fffffe          BL       ly_strncmp
000036  b988              CBNZ     r0,|L2.92|
;;;202                {
;;;203                    if (min_length == 0)
000038  b926              CBNZ     r6,|L2.68|
;;;204                    {
;;;205                        /* set name_ptr */
;;;206                        name_ptr = cmd_name;
00003a  4647              MOV      r7,r8
;;;207                        /* set initial length */
;;;208                        min_length = strlen(name_ptr);
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       strlen
000042  4606              MOV      r6,r0
                  |L2.68|
;;;209                    }
;;;210    
;;;211                    length = str_common(name_ptr, cmd_name);
000044  4641              MOV      r1,r8
000046  4638              MOV      r0,r7
000048  f7fffffe          BL       str_common
00004c  4604              MOV      r4,r0
;;;212                    if (length < min_length)
00004e  42b4              CMP      r4,r6
000050  da00              BGE      |L2.84|
;;;213                        min_length = length;
000052  4626              MOV      r6,r4
                  |L2.84|
;;;214    
;;;215                    printf("%s\r\n", cmd_name);
000054  4641              MOV      r1,r8
000056  a00b              ADR      r0,|L2.132|
000058  f7fffffe          BL       __2printf
                  |L2.92|
00005c  bf00              NOP                            ;198
                  |L2.94|
00005e  3508              ADDS     r5,r5,#8              ;196
                  |L2.96|
000060  480a              LDR      r0,|L2.140|
000062  6800              LDR      r0,[r0,#0]            ;196  ; _syscall_table_end
000064  4285              CMP      r5,r0                 ;196
000066  d3d3              BCC      |L2.16|
;;;216                }
;;;217            }
;;;218        }
;;;219    
;;;220        /* auto complete string */
;;;221        if (name_ptr != NULL)
000068  b127              CBZ      r7,|L2.116|
;;;222        {
;;;223            ly_strncpy(prefix, name_ptr, min_length);
00006a  4632              MOV      r2,r6
00006c  4639              MOV      r1,r7
00006e  4648              MOV      r0,r9
000070  f7fffffe          BL       ly_strncpy
                  |L2.116|
;;;224        }
;;;225    
;;;226        return ;
;;;227    }
000074  e8bd87f0          POP      {r4-r10,pc}
;;;228    #endif
                          ENDP

                  |L2.120|
                          DCD      _syscall_table_begin
                  |L2.124|
00007c  5f5f636d          DCB      "__cmd_",0
000080  645f00  
000083  00                DCB      0
                  |L2.132|
000084  25730d0a          DCB      "%s\r\n",0
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L2.140|
                          DCD      _syscall_table_end

                          AREA ||i.msh_exec||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  msh_exec PROC
;;;139    
;;;140    int msh_exec(char *cmd, unsigned long length)
000000  b538              PUSH     {r3-r5,lr}
;;;141    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;142        int cmd_ret;
;;;143    
;;;144        while ((length > 0) && (*cmd  == ' ' || *cmd == '\t'))
000006  e001              B        |L3.12|
                  |L3.8|
;;;145        {
;;;146            cmd++;
000008  1c64              ADDS     r4,r4,#1
;;;147            length--;
00000a  1e6d              SUBS     r5,r5,#1
                  |L3.12|
00000c  b12d              CBZ      r5,|L3.26|
00000e  7820              LDRB     r0,[r4,#0]            ;144
000010  2820              CMP      r0,#0x20              ;144
000012  d0f9              BEQ      |L3.8|
000014  7820              LDRB     r0,[r4,#0]            ;144
000016  2809              CMP      r0,#9                 ;144
000018  d0f6              BEQ      |L3.8|
                  |L3.26|
;;;148        }
;;;149    
;;;150        if (length == 0)
00001a  b90d              CBNZ     r5,|L3.32|
;;;151            return 0;
00001c  2000              MOVS     r0,#0
                  |L3.30|
;;;152        if (_msh_exec_cmd(cmd, length, &cmd_ret) == 0)
;;;153        {
;;;154            return cmd_ret;
;;;155        }
;;;156    
;;;157        {
;;;158            char *tcmd;
;;;159            tcmd = cmd;
;;;160            while (*tcmd != ' ' && *tcmd != '\0')
;;;161            {
;;;162                tcmd++;
;;;163            }
;;;164            *tcmd = '\0';
;;;165        }
;;;166    
;;;167    	printf("%s: command not found.\r\n", cmd);
;;;168        return -1;
;;;169    }
00001e  bd38              POP      {r3-r5,pc}
                  |L3.32|
000020  466a              MOV      r2,sp                 ;152
000022  4629              MOV      r1,r5                 ;152
000024  4620              MOV      r0,r4                 ;152
000026  f7fffffe          BL       _msh_exec_cmd
00002a  b908              CBNZ     r0,|L3.48|
00002c  9800              LDR      r0,[sp,#0]            ;154
00002e  e7f6              B        |L3.30|
                  |L3.48|
000030  4620              MOV      r0,r4                 ;159
000032  e000              B        |L3.54|
                  |L3.52|
000034  1c40              ADDS     r0,r0,#1              ;162
                  |L3.54|
000036  7801              LDRB     r1,[r0,#0]            ;160
000038  2920              CMP      r1,#0x20              ;160
00003a  d002              BEQ      |L3.66|
00003c  7801              LDRB     r1,[r0,#0]            ;160
00003e  2900              CMP      r1,#0                 ;160
000040  d1f8              BNE      |L3.52|
                  |L3.66|
000042  2100              MOVS     r1,#0                 ;164
000044  7001              STRB     r1,[r0,#0]            ;164
000046  4621              MOV      r1,r4                 ;167
000048  a002              ADR      r0,|L3.84|
00004a  f7fffffe          BL       __2printf
00004e  f04f30ff          MOV      r0,#0xffffffff        ;168
000052  e7e4              B        |L3.30|
;;;170    
                          ENDP

                  |L3.84|
000054  25733a20          DCB      "%s: command not found.\r\n",0
000058  636f6d6d
00005c  616e6420
000060  6e6f7420
000064  666f756e
000068  642e0d0a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.msh_get_cmd||, CODE, READONLY, ALIGN=2

                  msh_get_cmd PROC
;;;91     
;;;92     static cmd_function_t msh_get_cmd(char *cmd, int size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;93     {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;94         struct finsh_syscall *index;
;;;95         cmd_function_t cmd_func = NULL;
000008  2700              MOVS     r7,#0
;;;96     
;;;97         for (index = _syscall_table_begin;
00000a  4810              LDR      r0,|L4.76|
00000c  6804              LDR      r4,[r0,#0]  ; _syscall_table_begin
00000e  e015              B        |L4.60|
                  |L4.16|
;;;98                 index < _syscall_table_end;
;;;99                 FINSH_NEXT_SYSCALL(index))
;;;100        {
;;;101            if (ly_strncmp(index->name, "__cmd_", 6) != 0) continue;
000010  2206              MOVS     r2,#6
000012  a10f              ADR      r1,|L4.80|
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       ly_strncmp
00001a  b100              CBZ      r0,|L4.30|
00001c  e00d              B        |L4.58|
                  |L4.30|
;;;102    
;;;103            if (ly_strncmp(&index->name[6], cmd, size) == 0 &&
00001e  6821              LDR      r1,[r4,#0]
000020  1d88              ADDS     r0,r1,#6
000022  462a              MOV      r2,r5
000024  4631              MOV      r1,r6
000026  f7fffffe          BL       ly_strncmp
00002a  b928              CBNZ     r0,|L4.56|
;;;104                    index->name[6 + size] == '\0')
00002c  1da8              ADDS     r0,r5,#6
00002e  6821              LDR      r1,[r4,#0]
000030  5c08              LDRB     r0,[r1,r0]
000032  b908              CBNZ     r0,|L4.56|
;;;105            {
;;;106                cmd_func = (cmd_function_t)index->func;
000034  6867              LDR      r7,[r4,#4]
;;;107                break;
000036  e005              B        |L4.68|
                  |L4.56|
000038  bf00              NOP                            ;101
                  |L4.58|
00003a  3408              ADDS     r4,r4,#8              ;99
                  |L4.60|
00003c  4806              LDR      r0,|L4.88|
00003e  6800              LDR      r0,[r0,#0]            ;98  ; _syscall_table_end
000040  4284              CMP      r4,r0                 ;98
000042  d3e5              BCC      |L4.16|
                  |L4.68|
000044  bf00              NOP      
;;;108            }
;;;109        }
;;;110    
;;;111        return cmd_func;
000046  4638              MOV      r0,r7
;;;112    }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;113    
                          ENDP

                  |L4.76|
                          DCD      _syscall_table_begin
                  |L4.80|
000050  5f5f636d          DCB      "__cmd_",0
000054  645f00  
000057  00                DCB      0
                  |L4.88|
                          DCD      _syscall_table_end

                          AREA ||i.msh_split||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  msh_split PROC
;;;15     
;;;16     static int msh_split(char *cmd, unsigned long length, char *argv[FINSH_ARG_MAX])
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;17     {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
;;;18         char *ptr;
;;;19         unsigned long position;
;;;20         unsigned long  argc;
;;;21         unsigned long  i;
;;;22     
;;;23         ptr = cmd;
00000a  4654              MOV      r4,r10
;;;24         position = 0;
00000c  2500              MOVS     r5,#0
;;;25         argc = 0;
00000e  2700              MOVS     r7,#0
;;;26     
;;;27         while (position < length)
000010  e055              B        |L5.190|
                  |L5.18|
;;;28         {
;;;29             while ((*ptr == ' ' || *ptr == '\t') && position < length)
000012  e003              B        |L5.28|
                  |L5.20|
;;;30             {
;;;31                 *ptr = '\0';
000014  2000              MOVS     r0,#0
000016  7020              STRB     r0,[r4,#0]
;;;32                 ptr ++;
000018  1c64              ADDS     r4,r4,#1
;;;33                 position ++;
00001a  1c6d              ADDS     r5,r5,#1
                  |L5.28|
00001c  7820              LDRB     r0,[r4,#0]            ;29
00001e  2820              CMP      r0,#0x20              ;29
000020  d002              BEQ      |L5.40|
000022  7820              LDRB     r0,[r4,#0]            ;29
000024  2809              CMP      r0,#9                 ;29
000026  d101              BNE      |L5.44|
                  |L5.40|
000028  42b5              CMP      r5,r6                 ;29
00002a  d3f3              BCC      |L5.20|
                  |L5.44|
;;;34             }
;;;35     
;;;36             if (argc >= FINSH_ARG_MAX)
00002c  2f08              CMP      r7,#8
00002e  d312              BCC      |L5.86|
;;;37             {
;;;38                 printf("Too many args ! We only Use:\n");
000030  a026              ADR      r0,|L5.204|
000032  f7fffffe          BL       __2printf
;;;39                 for (i = 0; i < argc; i++)
000036  f04f0900          MOV      r9,#0
00003a  e006              B        |L5.74|
                  |L5.60|
;;;40                 {
;;;41                     printf("%s ", argv[i]);
00003c  f8581029          LDR      r1,[r8,r9,LSL #2]
000040  a02a              ADR      r0,|L5.236|
000042  f7fffffe          BL       __2printf
000046  f1090901          ADD      r9,r9,#1              ;39
                  |L5.74|
00004a  45b9              CMP      r9,r7                 ;39
00004c  d3f6              BCC      |L5.60|
;;;42                 }
;;;43                 printf("\n\r");
00004e  a028              ADR      r0,|L5.240|
000050  f7fffffe          BL       __2printf
;;;44                 break;
000054  e035              B        |L5.194|
                  |L5.86|
;;;45             }
;;;46     
;;;47             if (position >= length) break;
000056  42b5              CMP      r5,r6
000058  d300              BCC      |L5.92|
00005a  e032              B        |L5.194|
                  |L5.92|
;;;48     
;;;49             if (*ptr == '"')
00005c  7820              LDRB     r0,[r4,#0]
00005e  2822              CMP      r0,#0x22
000060  d11c              BNE      |L5.156|
;;;50             {
;;;51                 ptr ++;
000062  1c64              ADDS     r4,r4,#1
;;;52                 position ++;
000064  1c6d              ADDS     r5,r5,#1
;;;53                 argv[argc] = ptr;
000066  f8484027          STR      r4,[r8,r7,LSL #2]
;;;54                 argc ++;
00006a  1c7f              ADDS     r7,r7,#1
;;;55     
;;;56                 while (*ptr != '"' && position < length)
00006c  e009              B        |L5.130|
                  |L5.110|
;;;57                 {
;;;58                     if (*ptr == '\\')
00006e  7820              LDRB     r0,[r4,#0]
000070  285c              CMP      r0,#0x5c
000072  d104              BNE      |L5.126|
;;;59                     {
;;;60                         if (*(ptr + 1) == '"')
000074  7860              LDRB     r0,[r4,#1]
000076  2822              CMP      r0,#0x22
000078  d101              BNE      |L5.126|
;;;61                         {
;;;62                             ptr ++;
00007a  1c64              ADDS     r4,r4,#1
;;;63                             position ++;
00007c  1c6d              ADDS     r5,r5,#1
                  |L5.126|
;;;64                         }
;;;65                     }
;;;66                     ptr ++;
00007e  1c64              ADDS     r4,r4,#1
;;;67                     position ++;
000080  1c6d              ADDS     r5,r5,#1
                  |L5.130|
000082  7820              LDRB     r0,[r4,#0]            ;56
000084  2822              CMP      r0,#0x22              ;56
000086  d001              BEQ      |L5.140|
000088  42b5              CMP      r5,r6                 ;56
00008a  d3f0              BCC      |L5.110|
                  |L5.140|
;;;68                 }
;;;69                 if (position >= length) break;
00008c  42b5              CMP      r5,r6
00008e  d300              BCC      |L5.146|
000090  e017              B        |L5.194|
                  |L5.146|
;;;70     
;;;71                 *ptr = '\0';
000092  2000              MOVS     r0,#0
000094  7020              STRB     r0,[r4,#0]
;;;72                 ptr ++;
000096  1c64              ADDS     r4,r4,#1
;;;73                 position ++;
000098  1c6d              ADDS     r5,r5,#1
00009a  e010              B        |L5.190|
                  |L5.156|
;;;74             }
;;;75             else
;;;76             {
;;;77                 argv[argc] = ptr;
00009c  f8484027          STR      r4,[r8,r7,LSL #2]
;;;78                 argc ++;
0000a0  1c7f              ADDS     r7,r7,#1
;;;79                 while ((*ptr != ' ' && *ptr != '\t') && position < length)
0000a2  e001              B        |L5.168|
                  |L5.164|
;;;80                 {
;;;81                     ptr ++;
0000a4  1c64              ADDS     r4,r4,#1
;;;82                     position ++;
0000a6  1c6d              ADDS     r5,r5,#1
                  |L5.168|
0000a8  7820              LDRB     r0,[r4,#0]            ;79
0000aa  2820              CMP      r0,#0x20              ;79
0000ac  d004              BEQ      |L5.184|
0000ae  7820              LDRB     r0,[r4,#0]            ;79
0000b0  2809              CMP      r0,#9                 ;79
0000b2  d001              BEQ      |L5.184|
0000b4  42b5              CMP      r5,r6                 ;79
0000b6  d3f5              BCC      |L5.164|
                  |L5.184|
;;;83                 }
;;;84                 if (position >= length) break;
0000b8  42b5              CMP      r5,r6
0000ba  d300              BCC      |L5.190|
0000bc  e001              B        |L5.194|
                  |L5.190|
0000be  42b5              CMP      r5,r6                 ;27
0000c0  d3a7              BCC      |L5.18|
                  |L5.194|
0000c2  bf00              NOP                            ;44
;;;85             }
;;;86         }
;;;87     
;;;88         return argc;
0000c4  4638              MOV      r0,r7
;;;89     }
0000c6  e8bd87f0          POP      {r4-r10,pc}
;;;90     
                          ENDP

0000ca  0000              DCW      0x0000
                  |L5.204|
0000cc  546f6f20          DCB      "Too many args ! We only Use:\n",0
0000d0  6d616e79
0000d4  20617267
0000d8  73202120
0000dc  5765206f
0000e0  6e6c7920
0000e4  5573653a
0000e8  0a00    
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L5.236|
0000ec  25732000          DCB      "%s ",0
                  |L5.240|
0000f0  0a0d00            DCB      "\n\r",0
0000f3  00                DCB      0

                          AREA ||i.str_common||, CODE, READONLY, ALIGN=1

                  str_common PROC
;;;172    
;;;173    static int str_common(const char *str1, const char *str2)
000000  b510              PUSH     {r4,lr}
;;;174    {
000002  4603              MOV      r3,r0
;;;175        const char *str = str1;
000004  461a              MOV      r2,r3
;;;176    
;;;177        while ((*str != 0) && (*str2 != 0) && (*str == *str2))
000006  e001              B        |L6.12|
                  |L6.8|
;;;178        {
;;;179            str ++;
000008  1c52              ADDS     r2,r2,#1
;;;180            str2 ++;
00000a  1c49              ADDS     r1,r1,#1
                  |L6.12|
00000c  7810              LDRB     r0,[r2,#0]            ;177
00000e  b128              CBZ      r0,|L6.28|
000010  7808              LDRB     r0,[r1,#0]            ;177
000012  b118              CBZ      r0,|L6.28|
000014  7810              LDRB     r0,[r2,#0]            ;177
000016  780c              LDRB     r4,[r1,#0]            ;177
000018  42a0              CMP      r0,r4                 ;177
00001a  d0f5              BEQ      |L6.8|
                  |L6.28|
;;;181        }
;;;182    
;;;183        return (str - str1);
00001c  1ad0              SUBS     r0,r2,r3
;;;184    }
00001e  bd10              POP      {r4,pc}
;;;185    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\components\\shell\\msh.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_msh_c_msh_exec____REV16|
#line 464 ".\\board\\Interrupt\\Nvic_armcc.h"
|__asm___5_msh_c_msh_exec____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_msh_c_msh_exec____REVSH|
#line 479
|__asm___5_msh_c_msh_exec____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_msh_c_msh_exec____RRX|
#line 666
|__asm___5_msh_c_msh_exec____RRX| PROC
#line 667

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
